package netmsg;

message AppRequest {
  // Uniquely identifies one of our users
  required int64 phone_id = 1;

  // This is a guarantee a message of a certain type will exist.
  // TODO : This can be a bitmap
  enum MessageType {
    tFriendRequest=1;

    // Does not have message - uses phone id
    tGetFriendRequests=2;
    // Does not have message - uses phone id
    tGetFriends=3;  //

    tAcceptFriendRequest=4; //

    tCreatePublicEvent = 5;
    tCreatePrivateEvent = 6;

    // tEventInvite=6; //
    tEventAccept=7; //

    tRegistration=9;
    tLogin=10; //
    tUpdateProfile=11;

    // Does not have message - uses phone id
    // Invited private events
    tPollNotifications=14;
    // Visible (friend-of-friend) public events
    tPollNewsfeed=13; //
    // Accepted private events
    tPollAcceptedEvents=12; //

    tUserInfoRequest=15;
  }
  required MessageType msg_type = 2;

  /* Login, Register */
  // Implementation done
  message RegisterMessage {
    // Already have phone_id
    required string password_hash = 1;
    required string nickname = 2;
    required bool is_male=3;
  }
  optional RegisterMessage reg_msg = 3;

  message LoginMessage {
    // Server-side only compare hashes
    required string password_hash = 1;
  }
  optional LoginMessage login_msg = 4;

  /* Events */
  message CreatePrivateEvent {
    required string title = 1;
    required string location = 2;
    required int64 start_time = 3; // POSIX time
    required bytes event_uuid1 = 4;
    required string description = 5;
    repeated int64 invited_users = 6;
  }
  optional CreatePrivateEvent create_private_event = 5;

  message CreatePublicEvent {
    required string title = 1;
    required string location = 2;
    required int64 start_time = 3; // POSIX time
    required int64 end_time = 4; // POSIX time
    required bytes event_uuid1 = 5;
    required string description = 6;
  }
  optional CreatePublicEvent create_public_event = 6;

  // Separating messages for event accept,rejc,invt in anticipation of future diversification.
  // If there is contention for 1-16 ids, we can combine these message types.
  message EventAccept {
    required bytes event_uuid1 = 1;
  }
  optional EventAccept accept_event = 7;

  /*
  message EventReject {
    required bytes event_uuid1 = 1;
  }
  optional EventReject reject_event = 7;

  message EventInvite {
    required bytes event_uuid1 = 1;
    repeated int64 invited_users = 2;
  }
  optional EventInvite invite_event = 8;
  */

  /*
    These parameters are used in poll-type queries
  */
  message PollingParameters {
    optional int64 offset = 1;
    optional int64 amount = 2;
  }
  optional PollingParameters poll_params = 10;


  /* Friend */
  message FriendRequest {
    required int64 destination_user = 1;
    required string message = 2;
  }
  optional FriendRequest friend_request = 11;

  message AcceptFriendRequest {
    required int64 requesting_user_id = 1;
  }
  optional AcceptFriendRequest accept_friend_request = 12;

  message AlbumPhoto {
    required bytes photo = 1;
    optional string description = 2;
  }
  message PhotoAlbum {
    repeated AlbumPhoto photos = 1;
    optional string AlbumDescription = 2;
  }
  message UpdateProfile {
    optional string email = 1;
    optional string description = 2;
    optional string location = 3;
    optional string nickname = 4;
    optional string password = 5;
    optional bytes profile_photo = 6;
    repeated PhotoAlbum personal_albums = 7;
  }
  optional UpdateProfile update_profile = 13;

  // User info request
  repeated int64 request_user_info = 14;
}

message AppReply {
  // fail -> error, error reason in message
  enum ResponseType {
    // The generic success message
    tSuccess=1;

    // Failure Messages
    // Missing content fields
    tMissingInput=2;
  }
  required ResponseType response_type = 1;

  // Create event returns uuid of created event
  message EventUUID {
    required bytes event_uuid1 = 1;
  }
  optional EventUUID event_uuid = 2;

  // Polling friends needs to get multiple user objects
  message User {
    required int64 phone_number = 1;
    optional string nickname = 2;
    required bool is_male = 3;
    optional bytes profile_photo = 4;
    optional string email = 5;
    optional string description = 6;
    optional string location = 7;
  }
  repeated User users = 3;

  // Polling friend requests needs to get multiple friend requests objects
  message FriendRequest {
    required int64 request_origin_user_id = 1;
    // This has a default value when request is added to database.
    required string request_message = 2;
  }
  repeated FriendRequest friend_requests = 4;

  // Polling accepted invited events will return multiple event objects
  message EventInfo {
    required string title = 1;
    required string location = 2;
    required int64 time = 3;
    required bytes event_uuid = 4;
    required bool is_public = 5;
    required string description = 6;
    repeated int64 accepted_users = 7;
  }
  repeated EventInfo event_info = 5;

  // Polling accepted friends notifications will return list of user id
  repeated int64 accepted_friends = 6;
}
