// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Social.pb.h"
// @@protoc_insertion_point(imports)

@implementation SocialRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SocialRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface AppRequest ()
@property SInt64 phoneId;
@property AppRequestMessageType msgType;
@property (strong) AppRequestRegisterMessage* regMsg;
@property (strong) AppRequestLoginMessage* loginMsg;
@property (strong) AppRequestCreatePrivateEvent* createPrivateEvent;
@property (strong) AppRequestCreatePublicEvent* createPublicEvent;
@property (strong) AppRequestEventAccept* acceptEvent;
@property (strong) AppRequestPollingParameters* pollParams;
@property (strong) AppRequestFriendRequest* friendRequest;
@property (strong) AppRequestAcceptFriendRequest* acceptFriendRequest;
@property (strong) AppRequestUpdateProfile* updateProfile;
@property (strong) PBAppendableArray * requestUserInfoArray;
@end

@implementation AppRequest

- (BOOL) hasPhoneId {
  return !!hasPhoneId_;
}
- (void) setHasPhoneId:(BOOL) _value_ {
  hasPhoneId_ = !!_value_;
}
@synthesize phoneId;
- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) _value_ {
  hasMsgType_ = !!_value_;
}
@synthesize msgType;
- (BOOL) hasRegMsg {
  return !!hasRegMsg_;
}
- (void) setHasRegMsg:(BOOL) _value_ {
  hasRegMsg_ = !!_value_;
}
@synthesize regMsg;
- (BOOL) hasLoginMsg {
  return !!hasLoginMsg_;
}
- (void) setHasLoginMsg:(BOOL) _value_ {
  hasLoginMsg_ = !!_value_;
}
@synthesize loginMsg;
- (BOOL) hasCreatePrivateEvent {
  return !!hasCreatePrivateEvent_;
}
- (void) setHasCreatePrivateEvent:(BOOL) _value_ {
  hasCreatePrivateEvent_ = !!_value_;
}
@synthesize createPrivateEvent;
- (BOOL) hasCreatePublicEvent {
  return !!hasCreatePublicEvent_;
}
- (void) setHasCreatePublicEvent:(BOOL) _value_ {
  hasCreatePublicEvent_ = !!_value_;
}
@synthesize createPublicEvent;
- (BOOL) hasAcceptEvent {
  return !!hasAcceptEvent_;
}
- (void) setHasAcceptEvent:(BOOL) _value_ {
  hasAcceptEvent_ = !!_value_;
}
@synthesize acceptEvent;
- (BOOL) hasPollParams {
  return !!hasPollParams_;
}
- (void) setHasPollParams:(BOOL) _value_ {
  hasPollParams_ = !!_value_;
}
@synthesize pollParams;
- (BOOL) hasFriendRequest {
  return !!hasFriendRequest_;
}
- (void) setHasFriendRequest:(BOOL) _value_ {
  hasFriendRequest_ = !!_value_;
}
@synthesize friendRequest;
- (BOOL) hasAcceptFriendRequest {
  return !!hasAcceptFriendRequest_;
}
- (void) setHasAcceptFriendRequest:(BOOL) _value_ {
  hasAcceptFriendRequest_ = !!_value_;
}
@synthesize acceptFriendRequest;
- (BOOL) hasUpdateProfile {
  return !!hasUpdateProfile_;
}
- (void) setHasUpdateProfile:(BOOL) _value_ {
  hasUpdateProfile_ = !!_value_;
}
@synthesize updateProfile;
@synthesize requestUserInfoArray;
@dynamic requestUserInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.phoneId = 0L;
    self.msgType = AppRequestMessageTypeTFriendRequest;
    self.regMsg = [AppRequestRegisterMessage defaultInstance];
    self.loginMsg = [AppRequestLoginMessage defaultInstance];
    self.createPrivateEvent = [AppRequestCreatePrivateEvent defaultInstance];
    self.createPublicEvent = [AppRequestCreatePublicEvent defaultInstance];
    self.acceptEvent = [AppRequestEventAccept defaultInstance];
    self.pollParams = [AppRequestPollingParameters defaultInstance];
    self.friendRequest = [AppRequestFriendRequest defaultInstance];
    self.acceptFriendRequest = [AppRequestAcceptFriendRequest defaultInstance];
    self.updateProfile = [AppRequestUpdateProfile defaultInstance];
  }
  return self;
}
static AppRequest* defaultAppRequestInstance = nil;
+ (void) initialize {
  if (self == [AppRequest class]) {
    defaultAppRequestInstance = [[AppRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestInstance;
}
- (PBArray *)requestUserInfo {
  return requestUserInfoArray;
}
- (SInt64)requestUserInfoAtIndex:(NSUInteger)index {
  return [requestUserInfoArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPhoneId) {
    return NO;
  }
  if (!self.hasMsgType) {
    return NO;
  }
  if (self.hasRegMsg) {
    if (!self.regMsg.isInitialized) {
      return NO;
    }
  }
  if (self.hasLoginMsg) {
    if (!self.loginMsg.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreatePrivateEvent) {
    if (!self.createPrivateEvent.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreatePublicEvent) {
    if (!self.createPublicEvent.isInitialized) {
      return NO;
    }
  }
  if (self.hasAcceptEvent) {
    if (!self.acceptEvent.isInitialized) {
      return NO;
    }
  }
  if (self.hasFriendRequest) {
    if (!self.friendRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasAcceptFriendRequest) {
    if (!self.acceptFriendRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUpdateProfile) {
    if (!self.updateProfile.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoneId) {
    [output writeInt64:1 value:self.phoneId];
  }
  if (self.hasMsgType) {
    [output writeEnum:2 value:self.msgType];
  }
  if (self.hasRegMsg) {
    [output writeMessage:3 value:self.regMsg];
  }
  if (self.hasLoginMsg) {
    [output writeMessage:4 value:self.loginMsg];
  }
  if (self.hasCreatePrivateEvent) {
    [output writeMessage:5 value:self.createPrivateEvent];
  }
  if (self.hasCreatePublicEvent) {
    [output writeMessage:6 value:self.createPublicEvent];
  }
  if (self.hasAcceptEvent) {
    [output writeMessage:7 value:self.acceptEvent];
  }
  if (self.hasPollParams) {
    [output writeMessage:10 value:self.pollParams];
  }
  if (self.hasFriendRequest) {
    [output writeMessage:11 value:self.friendRequest];
  }
  if (self.hasAcceptFriendRequest) {
    [output writeMessage:12 value:self.acceptFriendRequest];
  }
  if (self.hasUpdateProfile) {
    [output writeMessage:13 value:self.updateProfile];
  }
  const NSUInteger requestUserInfoArrayCount = self.requestUserInfoArray.count;
  if (requestUserInfoArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.requestUserInfoArray.data;
    for (NSUInteger i = 0; i < requestUserInfoArrayCount; ++i) {
      [output writeInt64:14 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoneId) {
    size_ += computeInt64Size(1, self.phoneId);
  }
  if (self.hasMsgType) {
    size_ += computeEnumSize(2, self.msgType);
  }
  if (self.hasRegMsg) {
    size_ += computeMessageSize(3, self.regMsg);
  }
  if (self.hasLoginMsg) {
    size_ += computeMessageSize(4, self.loginMsg);
  }
  if (self.hasCreatePrivateEvent) {
    size_ += computeMessageSize(5, self.createPrivateEvent);
  }
  if (self.hasCreatePublicEvent) {
    size_ += computeMessageSize(6, self.createPublicEvent);
  }
  if (self.hasAcceptEvent) {
    size_ += computeMessageSize(7, self.acceptEvent);
  }
  if (self.hasPollParams) {
    size_ += computeMessageSize(10, self.pollParams);
  }
  if (self.hasFriendRequest) {
    size_ += computeMessageSize(11, self.friendRequest);
  }
  if (self.hasAcceptFriendRequest) {
    size_ += computeMessageSize(12, self.acceptFriendRequest);
  }
  if (self.hasUpdateProfile) {
    size_ += computeMessageSize(13, self.updateProfile);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.requestUserInfoArray.count;
    const SInt64 *values = (const SInt64 *)self.requestUserInfoArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequest*) parseFromData:(NSData*) data {
  return (AppRequest*)[[[AppRequest builder] mergeFromData:data] build];
}
+ (AppRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequest*)[[[AppRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequest*)[[[AppRequest builder] mergeFromInputStream:input] build];
}
+ (AppRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequest*)[[[AppRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequest*)[[[AppRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequest*)[[[AppRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestBuilder*) builder {
  return [[AppRequestBuilder alloc] init];
}
+ (AppRequestBuilder*) builderWithPrototype:(AppRequest*) prototype {
  return [[AppRequest builder] mergeFrom:prototype];
}
- (AppRequestBuilder*) builder {
  return [AppRequest builder];
}
- (AppRequestBuilder*) toBuilder {
  return [AppRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoneId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneId", [NSNumber numberWithLongLong:self.phoneId]];
  }
  if (self.hasMsgType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgType", NSStringFromAppRequestMessageType(self.msgType)];
  }
  if (self.hasRegMsg) {
    [output appendFormat:@"%@%@ {\n", indent, @"regMsg"];
    [self.regMsg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLoginMsg) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginMsg"];
    [self.loginMsg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreatePrivateEvent) {
    [output appendFormat:@"%@%@ {\n", indent, @"createPrivateEvent"];
    [self.createPrivateEvent writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreatePublicEvent) {
    [output appendFormat:@"%@%@ {\n", indent, @"createPublicEvent"];
    [self.createPublicEvent writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAcceptEvent) {
    [output appendFormat:@"%@%@ {\n", indent, @"acceptEvent"];
    [self.acceptEvent writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPollParams) {
    [output appendFormat:@"%@%@ {\n", indent, @"pollParams"];
    [self.pollParams writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFriendRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"friendRequest"];
    [self.friendRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAcceptFriendRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"acceptFriendRequest"];
    [self.acceptFriendRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUpdateProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"updateProfile"];
    [self.updateProfile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.requestUserInfoArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestUserInfo", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoneId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.phoneId] forKey: @"phoneId"];
  }
  if (self.hasMsgType) {
    [dictionary setObject: @(self.msgType) forKey: @"msgType"];
  }
  if (self.hasRegMsg) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.regMsg storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"regMsg"];
  }
  if (self.hasLoginMsg) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginMsg storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginMsg"];
  }
  if (self.hasCreatePrivateEvent) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.createPrivateEvent storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"createPrivateEvent"];
  }
  if (self.hasCreatePublicEvent) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.createPublicEvent storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"createPublicEvent"];
  }
  if (self.hasAcceptEvent) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.acceptEvent storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"acceptEvent"];
  }
  if (self.hasPollParams) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.pollParams storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pollParams"];
  }
  if (self.hasFriendRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.friendRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"friendRequest"];
  }
  if (self.hasAcceptFriendRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.acceptFriendRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"acceptFriendRequest"];
  }
  if (self.hasUpdateProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.updateProfile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"updateProfile"];
  }
  NSMutableArray * requestUserInfoArrayArray = [NSMutableArray new];
  NSUInteger requestUserInfoArrayCount=self.requestUserInfoArray.count;
  for(int i=0;i<requestUserInfoArrayCount;i++){
    [requestUserInfoArrayArray addObject: @([self.requestUserInfoArray int64AtIndex:i])];
  }
  [dictionary setObject: requestUserInfoArrayArray forKey: @"requestUserInfo"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequest class]]) {
    return NO;
  }
  AppRequest *otherMessage = other;
  return
      self.hasPhoneId == otherMessage.hasPhoneId &&
      (!self.hasPhoneId || self.phoneId == otherMessage.phoneId) &&
      self.hasMsgType == otherMessage.hasMsgType &&
      (!self.hasMsgType || self.msgType == otherMessage.msgType) &&
      self.hasRegMsg == otherMessage.hasRegMsg &&
      (!self.hasRegMsg || [self.regMsg isEqual:otherMessage.regMsg]) &&
      self.hasLoginMsg == otherMessage.hasLoginMsg &&
      (!self.hasLoginMsg || [self.loginMsg isEqual:otherMessage.loginMsg]) &&
      self.hasCreatePrivateEvent == otherMessage.hasCreatePrivateEvent &&
      (!self.hasCreatePrivateEvent || [self.createPrivateEvent isEqual:otherMessage.createPrivateEvent]) &&
      self.hasCreatePublicEvent == otherMessage.hasCreatePublicEvent &&
      (!self.hasCreatePublicEvent || [self.createPublicEvent isEqual:otherMessage.createPublicEvent]) &&
      self.hasAcceptEvent == otherMessage.hasAcceptEvent &&
      (!self.hasAcceptEvent || [self.acceptEvent isEqual:otherMessage.acceptEvent]) &&
      self.hasPollParams == otherMessage.hasPollParams &&
      (!self.hasPollParams || [self.pollParams isEqual:otherMessage.pollParams]) &&
      self.hasFriendRequest == otherMessage.hasFriendRequest &&
      (!self.hasFriendRequest || [self.friendRequest isEqual:otherMessage.friendRequest]) &&
      self.hasAcceptFriendRequest == otherMessage.hasAcceptFriendRequest &&
      (!self.hasAcceptFriendRequest || [self.acceptFriendRequest isEqual:otherMessage.acceptFriendRequest]) &&
      self.hasUpdateProfile == otherMessage.hasUpdateProfile &&
      (!self.hasUpdateProfile || [self.updateProfile isEqual:otherMessage.updateProfile]) &&
      [self.requestUserInfoArray isEqualToArray:otherMessage.requestUserInfoArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoneId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.phoneId] hash];
  }
  if (self.hasMsgType) {
    hashCode = hashCode * 31 + self.msgType;
  }
  if (self.hasRegMsg) {
    hashCode = hashCode * 31 + [self.regMsg hash];
  }
  if (self.hasLoginMsg) {
    hashCode = hashCode * 31 + [self.loginMsg hash];
  }
  if (self.hasCreatePrivateEvent) {
    hashCode = hashCode * 31 + [self.createPrivateEvent hash];
  }
  if (self.hasCreatePublicEvent) {
    hashCode = hashCode * 31 + [self.createPublicEvent hash];
  }
  if (self.hasAcceptEvent) {
    hashCode = hashCode * 31 + [self.acceptEvent hash];
  }
  if (self.hasPollParams) {
    hashCode = hashCode * 31 + [self.pollParams hash];
  }
  if (self.hasFriendRequest) {
    hashCode = hashCode * 31 + [self.friendRequest hash];
  }
  if (self.hasAcceptFriendRequest) {
    hashCode = hashCode * 31 + [self.acceptFriendRequest hash];
  }
  if (self.hasUpdateProfile) {
    hashCode = hashCode * 31 + [self.updateProfile hash];
  }
  [self.requestUserInfoArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL AppRequestMessageTypeIsValidValue(AppRequestMessageType value) {
  switch (value) {
    case AppRequestMessageTypeTFriendRequest:
    case AppRequestMessageTypeTGetFriendRequests:
    case AppRequestMessageTypeTGetFriends:
    case AppRequestMessageTypeTAcceptFriendRequest:
    case AppRequestMessageTypeTCreatePublicEvent:
    case AppRequestMessageTypeTCreatePrivateEvent:
    case AppRequestMessageTypeTEventAccept:
    case AppRequestMessageTypeTRegistration:
    case AppRequestMessageTypeTLogin:
    case AppRequestMessageTypeTUpdateProfile:
    case AppRequestMessageTypeTPollNotifications:
    case AppRequestMessageTypeTPollNewsfeed:
    case AppRequestMessageTypeTPollAcceptedEvents:
    case AppRequestMessageTypeTUserInfoRequest:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromAppRequestMessageType(AppRequestMessageType value) {
  switch (value) {
    case AppRequestMessageTypeTFriendRequest:
      return @"AppRequestMessageTypeTFriendRequest";
    case AppRequestMessageTypeTGetFriendRequests:
      return @"AppRequestMessageTypeTGetFriendRequests";
    case AppRequestMessageTypeTGetFriends:
      return @"AppRequestMessageTypeTGetFriends";
    case AppRequestMessageTypeTAcceptFriendRequest:
      return @"AppRequestMessageTypeTAcceptFriendRequest";
    case AppRequestMessageTypeTCreatePublicEvent:
      return @"AppRequestMessageTypeTCreatePublicEvent";
    case AppRequestMessageTypeTCreatePrivateEvent:
      return @"AppRequestMessageTypeTCreatePrivateEvent";
    case AppRequestMessageTypeTEventAccept:
      return @"AppRequestMessageTypeTEventAccept";
    case AppRequestMessageTypeTRegistration:
      return @"AppRequestMessageTypeTRegistration";
    case AppRequestMessageTypeTLogin:
      return @"AppRequestMessageTypeTLogin";
    case AppRequestMessageTypeTUpdateProfile:
      return @"AppRequestMessageTypeTUpdateProfile";
    case AppRequestMessageTypeTPollNotifications:
      return @"AppRequestMessageTypeTPollNotifications";
    case AppRequestMessageTypeTPollNewsfeed:
      return @"AppRequestMessageTypeTPollNewsfeed";
    case AppRequestMessageTypeTPollAcceptedEvents:
      return @"AppRequestMessageTypeTPollAcceptedEvents";
    case AppRequestMessageTypeTUserInfoRequest:
      return @"AppRequestMessageTypeTUserInfoRequest";
    default:
      return nil;
  }
}

@interface AppRequestRegisterMessage ()
@property (strong) NSString* passwordHash;
@property (strong) NSString* nickname;
@property BOOL isMale;
@end

@implementation AppRequestRegisterMessage

- (BOOL) hasPasswordHash {
  return !!hasPasswordHash_;
}
- (void) setHasPasswordHash:(BOOL) _value_ {
  hasPasswordHash_ = !!_value_;
}
@synthesize passwordHash;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) _value_ {
  hasNickname_ = !!_value_;
}
@synthesize nickname;
- (BOOL) hasIsMale {
  return !!hasIsMale_;
}
- (void) setHasIsMale:(BOOL) _value_ {
  hasIsMale_ = !!_value_;
}
- (BOOL) isMale {
  return !!isMale_;
}
- (void) setIsMale:(BOOL) _value_ {
  isMale_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.passwordHash = @"";
    self.nickname = @"";
    self.isMale = NO;
  }
  return self;
}
static AppRequestRegisterMessage* defaultAppRequestRegisterMessageInstance = nil;
+ (void) initialize {
  if (self == [AppRequestRegisterMessage class]) {
    defaultAppRequestRegisterMessageInstance = [[AppRequestRegisterMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestRegisterMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestRegisterMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPasswordHash) {
    return NO;
  }
  if (!self.hasNickname) {
    return NO;
  }
  if (!self.hasIsMale) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPasswordHash) {
    [output writeString:1 value:self.passwordHash];
  }
  if (self.hasNickname) {
    [output writeString:2 value:self.nickname];
  }
  if (self.hasIsMale) {
    [output writeBool:3 value:self.isMale];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPasswordHash) {
    size_ += computeStringSize(1, self.passwordHash);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(2, self.nickname);
  }
  if (self.hasIsMale) {
    size_ += computeBoolSize(3, self.isMale);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestRegisterMessage*) parseFromData:(NSData*) data {
  return (AppRequestRegisterMessage*)[[[AppRequestRegisterMessage builder] mergeFromData:data] build];
}
+ (AppRequestRegisterMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestRegisterMessage*)[[[AppRequestRegisterMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestRegisterMessage*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestRegisterMessage*)[[[AppRequestRegisterMessage builder] mergeFromInputStream:input] build];
}
+ (AppRequestRegisterMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestRegisterMessage*)[[[AppRequestRegisterMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestRegisterMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestRegisterMessage*)[[[AppRequestRegisterMessage builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestRegisterMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestRegisterMessage*)[[[AppRequestRegisterMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestRegisterMessageBuilder*) builder {
  return [[AppRequestRegisterMessageBuilder alloc] init];
}
+ (AppRequestRegisterMessageBuilder*) builderWithPrototype:(AppRequestRegisterMessage*) prototype {
  return [[AppRequestRegisterMessage builder] mergeFrom:prototype];
}
- (AppRequestRegisterMessageBuilder*) builder {
  return [AppRequestRegisterMessage builder];
}
- (AppRequestRegisterMessageBuilder*) toBuilder {
  return [AppRequestRegisterMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPasswordHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passwordHash", self.passwordHash];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  if (self.hasIsMale) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isMale", [NSNumber numberWithBool:self.isMale]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPasswordHash) {
    [dictionary setObject: self.passwordHash forKey: @"passwordHash"];
  }
  if (self.hasNickname) {
    [dictionary setObject: self.nickname forKey: @"nickname"];
  }
  if (self.hasIsMale) {
    [dictionary setObject: [NSNumber numberWithBool:self.isMale] forKey: @"isMale"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestRegisterMessage class]]) {
    return NO;
  }
  AppRequestRegisterMessage *otherMessage = other;
  return
      self.hasPasswordHash == otherMessage.hasPasswordHash &&
      (!self.hasPasswordHash || [self.passwordHash isEqual:otherMessage.passwordHash]) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      self.hasIsMale == otherMessage.hasIsMale &&
      (!self.hasIsMale || self.isMale == otherMessage.isMale) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPasswordHash) {
    hashCode = hashCode * 31 + [self.passwordHash hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  if (self.hasIsMale) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isMale] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestRegisterMessageBuilder()
@property (strong) AppRequestRegisterMessage* resultRegisterMessage;
@end

@implementation AppRequestRegisterMessageBuilder
@synthesize resultRegisterMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegisterMessage = [[AppRequestRegisterMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegisterMessage;
}
- (AppRequestRegisterMessageBuilder*) clear {
  self.resultRegisterMessage = [[AppRequestRegisterMessage alloc] init];
  return self;
}
- (AppRequestRegisterMessageBuilder*) clone {
  return [AppRequestRegisterMessage builderWithPrototype:resultRegisterMessage];
}
- (AppRequestRegisterMessage*) defaultInstance {
  return [AppRequestRegisterMessage defaultInstance];
}
- (AppRequestRegisterMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestRegisterMessage*) buildPartial {
  AppRequestRegisterMessage* returnMe = resultRegisterMessage;
  self.resultRegisterMessage = nil;
  return returnMe;
}
- (AppRequestRegisterMessageBuilder*) mergeFrom:(AppRequestRegisterMessage*) other {
  if (other == [AppRequestRegisterMessage defaultInstance]) {
    return self;
  }
  if (other.hasPasswordHash) {
    [self setPasswordHash:other.passwordHash];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  if (other.hasIsMale) {
    [self setIsMale:other.isMale];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestRegisterMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestRegisterMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPasswordHash:[input readString]];
        break;
      }
      case 18: {
        [self setNickname:[input readString]];
        break;
      }
      case 24: {
        [self setIsMale:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasPasswordHash {
  return resultRegisterMessage.hasPasswordHash;
}
- (NSString*) passwordHash {
  return resultRegisterMessage.passwordHash;
}
- (AppRequestRegisterMessageBuilder*) setPasswordHash:(NSString*) value {
  resultRegisterMessage.hasPasswordHash = YES;
  resultRegisterMessage.passwordHash = value;
  return self;
}
- (AppRequestRegisterMessageBuilder*) clearPasswordHash {
  resultRegisterMessage.hasPasswordHash = NO;
  resultRegisterMessage.passwordHash = @"";
  return self;
}
- (BOOL) hasNickname {
  return resultRegisterMessage.hasNickname;
}
- (NSString*) nickname {
  return resultRegisterMessage.nickname;
}
- (AppRequestRegisterMessageBuilder*) setNickname:(NSString*) value {
  resultRegisterMessage.hasNickname = YES;
  resultRegisterMessage.nickname = value;
  return self;
}
- (AppRequestRegisterMessageBuilder*) clearNickname {
  resultRegisterMessage.hasNickname = NO;
  resultRegisterMessage.nickname = @"";
  return self;
}
- (BOOL) hasIsMale {
  return resultRegisterMessage.hasIsMale;
}
- (BOOL) isMale {
  return resultRegisterMessage.isMale;
}
- (AppRequestRegisterMessageBuilder*) setIsMale:(BOOL) value {
  resultRegisterMessage.hasIsMale = YES;
  resultRegisterMessage.isMale = value;
  return self;
}
- (AppRequestRegisterMessageBuilder*) clearIsMale {
  resultRegisterMessage.hasIsMale = NO;
  resultRegisterMessage.isMale = NO;
  return self;
}
@end

@interface AppRequestLoginMessage ()
@property (strong) NSString* passwordHash;
@end

@implementation AppRequestLoginMessage

- (BOOL) hasPasswordHash {
  return !!hasPasswordHash_;
}
- (void) setHasPasswordHash:(BOOL) _value_ {
  hasPasswordHash_ = !!_value_;
}
@synthesize passwordHash;
- (instancetype) init {
  if ((self = [super init])) {
    self.passwordHash = @"";
  }
  return self;
}
static AppRequestLoginMessage* defaultAppRequestLoginMessageInstance = nil;
+ (void) initialize {
  if (self == [AppRequestLoginMessage class]) {
    defaultAppRequestLoginMessageInstance = [[AppRequestLoginMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestLoginMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestLoginMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPasswordHash) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPasswordHash) {
    [output writeString:1 value:self.passwordHash];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPasswordHash) {
    size_ += computeStringSize(1, self.passwordHash);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestLoginMessage*) parseFromData:(NSData*) data {
  return (AppRequestLoginMessage*)[[[AppRequestLoginMessage builder] mergeFromData:data] build];
}
+ (AppRequestLoginMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestLoginMessage*)[[[AppRequestLoginMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestLoginMessage*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestLoginMessage*)[[[AppRequestLoginMessage builder] mergeFromInputStream:input] build];
}
+ (AppRequestLoginMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestLoginMessage*)[[[AppRequestLoginMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestLoginMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestLoginMessage*)[[[AppRequestLoginMessage builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestLoginMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestLoginMessage*)[[[AppRequestLoginMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestLoginMessageBuilder*) builder {
  return [[AppRequestLoginMessageBuilder alloc] init];
}
+ (AppRequestLoginMessageBuilder*) builderWithPrototype:(AppRequestLoginMessage*) prototype {
  return [[AppRequestLoginMessage builder] mergeFrom:prototype];
}
- (AppRequestLoginMessageBuilder*) builder {
  return [AppRequestLoginMessage builder];
}
- (AppRequestLoginMessageBuilder*) toBuilder {
  return [AppRequestLoginMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPasswordHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passwordHash", self.passwordHash];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPasswordHash) {
    [dictionary setObject: self.passwordHash forKey: @"passwordHash"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestLoginMessage class]]) {
    return NO;
  }
  AppRequestLoginMessage *otherMessage = other;
  return
      self.hasPasswordHash == otherMessage.hasPasswordHash &&
      (!self.hasPasswordHash || [self.passwordHash isEqual:otherMessage.passwordHash]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPasswordHash) {
    hashCode = hashCode * 31 + [self.passwordHash hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestLoginMessageBuilder()
@property (strong) AppRequestLoginMessage* resultLoginMessage;
@end

@implementation AppRequestLoginMessageBuilder
@synthesize resultLoginMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginMessage = [[AppRequestLoginMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginMessage;
}
- (AppRequestLoginMessageBuilder*) clear {
  self.resultLoginMessage = [[AppRequestLoginMessage alloc] init];
  return self;
}
- (AppRequestLoginMessageBuilder*) clone {
  return [AppRequestLoginMessage builderWithPrototype:resultLoginMessage];
}
- (AppRequestLoginMessage*) defaultInstance {
  return [AppRequestLoginMessage defaultInstance];
}
- (AppRequestLoginMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestLoginMessage*) buildPartial {
  AppRequestLoginMessage* returnMe = resultLoginMessage;
  self.resultLoginMessage = nil;
  return returnMe;
}
- (AppRequestLoginMessageBuilder*) mergeFrom:(AppRequestLoginMessage*) other {
  if (other == [AppRequestLoginMessage defaultInstance]) {
    return self;
  }
  if (other.hasPasswordHash) {
    [self setPasswordHash:other.passwordHash];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestLoginMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestLoginMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPasswordHash:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPasswordHash {
  return resultLoginMessage.hasPasswordHash;
}
- (NSString*) passwordHash {
  return resultLoginMessage.passwordHash;
}
- (AppRequestLoginMessageBuilder*) setPasswordHash:(NSString*) value {
  resultLoginMessage.hasPasswordHash = YES;
  resultLoginMessage.passwordHash = value;
  return self;
}
- (AppRequestLoginMessageBuilder*) clearPasswordHash {
  resultLoginMessage.hasPasswordHash = NO;
  resultLoginMessage.passwordHash = @"";
  return self;
}
@end

@interface AppRequestCreatePrivateEvent ()
@property (strong) NSString* title;
@property (strong) NSString* location;
@property SInt64 startTime;
@property (strong) NSData* eventUuid1;
@property (strong) NSString* pb_description;
@property (strong) PBAppendableArray * invitedUsersArray;
@end

@implementation AppRequestCreatePrivateEvent

- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) _value_ {
  hasStartTime_ = !!_value_;
}
@synthesize startTime;
- (BOOL) hasEventUuid1 {
  return !!hasEventUuid1_;
}
- (void) setHasEventUuid1:(BOOL) _value_ {
  hasEventUuid1_ = !!_value_;
}
@synthesize eventUuid1;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
@synthesize invitedUsersArray;
@dynamic invitedUsers;
- (instancetype) init {
  if ((self = [super init])) {
    self.title = @"";
    self.location = @"";
    self.startTime = 0L;
    self.eventUuid1 = [NSData data];
    self.pb_description = @"";
  }
  return self;
}
static AppRequestCreatePrivateEvent* defaultAppRequestCreatePrivateEventInstance = nil;
+ (void) initialize {
  if (self == [AppRequestCreatePrivateEvent class]) {
    defaultAppRequestCreatePrivateEventInstance = [[AppRequestCreatePrivateEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestCreatePrivateEventInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestCreatePrivateEventInstance;
}
- (PBArray *)invitedUsers {
  return invitedUsersArray;
}
- (SInt64)invitedUsersAtIndex:(NSUInteger)index {
  return [invitedUsersArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTitle) {
    return NO;
  }
  if (!self.hasLocation) {
    return NO;
  }
  if (!self.hasStartTime) {
    return NO;
  }
  if (!self.hasEventUuid1) {
    return NO;
  }
  if (!self.hasDescription) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeString:1 value:self.title];
  }
  if (self.hasLocation) {
    [output writeString:2 value:self.location];
  }
  if (self.hasStartTime) {
    [output writeInt64:3 value:self.startTime];
  }
  if (self.hasEventUuid1) {
    [output writeData:4 value:self.eventUuid1];
  }
  if (self.hasDescription) {
    [output writeString:5 value:self.pb_description];
  }
  const NSUInteger invitedUsersArrayCount = self.invitedUsersArray.count;
  if (invitedUsersArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.invitedUsersArray.data;
    for (NSUInteger i = 0; i < invitedUsersArrayCount; ++i) {
      [output writeInt64:6 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTitle) {
    size_ += computeStringSize(1, self.title);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(2, self.location);
  }
  if (self.hasStartTime) {
    size_ += computeInt64Size(3, self.startTime);
  }
  if (self.hasEventUuid1) {
    size_ += computeDataSize(4, self.eventUuid1);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(5, self.pb_description);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.invitedUsersArray.count;
    const SInt64 *values = (const SInt64 *)self.invitedUsersArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestCreatePrivateEvent*) parseFromData:(NSData*) data {
  return (AppRequestCreatePrivateEvent*)[[[AppRequestCreatePrivateEvent builder] mergeFromData:data] build];
}
+ (AppRequestCreatePrivateEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestCreatePrivateEvent*)[[[AppRequestCreatePrivateEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestCreatePrivateEvent*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestCreatePrivateEvent*)[[[AppRequestCreatePrivateEvent builder] mergeFromInputStream:input] build];
}
+ (AppRequestCreatePrivateEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestCreatePrivateEvent*)[[[AppRequestCreatePrivateEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestCreatePrivateEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestCreatePrivateEvent*)[[[AppRequestCreatePrivateEvent builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestCreatePrivateEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestCreatePrivateEvent*)[[[AppRequestCreatePrivateEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestCreatePrivateEventBuilder*) builder {
  return [[AppRequestCreatePrivateEventBuilder alloc] init];
}
+ (AppRequestCreatePrivateEventBuilder*) builderWithPrototype:(AppRequestCreatePrivateEvent*) prototype {
  return [[AppRequestCreatePrivateEvent builder] mergeFrom:prototype];
}
- (AppRequestCreatePrivateEventBuilder*) builder {
  return [AppRequestCreatePrivateEvent builder];
}
- (AppRequestCreatePrivateEventBuilder*) toBuilder {
  return [AppRequestCreatePrivateEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithLongLong:self.startTime]];
  }
  if (self.hasEventUuid1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventUuid1", self.eventUuid1];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  [self.invitedUsersArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"invitedUsers", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  if (self.hasStartTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.startTime] forKey: @"startTime"];
  }
  if (self.hasEventUuid1) {
    [dictionary setObject: self.eventUuid1 forKey: @"eventUuid1"];
  }
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  NSMutableArray * invitedUsersArrayArray = [NSMutableArray new];
  NSUInteger invitedUsersArrayCount=self.invitedUsersArray.count;
  for(int i=0;i<invitedUsersArrayCount;i++){
    [invitedUsersArrayArray addObject: @([self.invitedUsersArray int64AtIndex:i])];
  }
  [dictionary setObject: invitedUsersArrayArray forKey: @"invitedUsers"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestCreatePrivateEvent class]]) {
    return NO;
  }
  AppRequestCreatePrivateEvent *otherMessage = other;
  return
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      self.hasEventUuid1 == otherMessage.hasEventUuid1 &&
      (!self.hasEventUuid1 || [self.eventUuid1 isEqual:otherMessage.eventUuid1]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      [self.invitedUsersArray isEqualToArray:otherMessage.invitedUsersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.startTime] hash];
  }
  if (self.hasEventUuid1) {
    hashCode = hashCode * 31 + [self.eventUuid1 hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  [self.invitedUsersArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestCreatePrivateEventBuilder()
@property (strong) AppRequestCreatePrivateEvent* resultCreatePrivateEvent;
@end

@implementation AppRequestCreatePrivateEventBuilder
@synthesize resultCreatePrivateEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreatePrivateEvent = [[AppRequestCreatePrivateEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreatePrivateEvent;
}
- (AppRequestCreatePrivateEventBuilder*) clear {
  self.resultCreatePrivateEvent = [[AppRequestCreatePrivateEvent alloc] init];
  return self;
}
- (AppRequestCreatePrivateEventBuilder*) clone {
  return [AppRequestCreatePrivateEvent builderWithPrototype:resultCreatePrivateEvent];
}
- (AppRequestCreatePrivateEvent*) defaultInstance {
  return [AppRequestCreatePrivateEvent defaultInstance];
}
- (AppRequestCreatePrivateEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestCreatePrivateEvent*) buildPartial {
  AppRequestCreatePrivateEvent* returnMe = resultCreatePrivateEvent;
  self.resultCreatePrivateEvent = nil;
  return returnMe;
}
- (AppRequestCreatePrivateEventBuilder*) mergeFrom:(AppRequestCreatePrivateEvent*) other {
  if (other == [AppRequestCreatePrivateEvent defaultInstance]) {
    return self;
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEventUuid1) {
    [self setEventUuid1:other.eventUuid1];
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  if (other.invitedUsersArray.count > 0) {
    if (resultCreatePrivateEvent.invitedUsersArray == nil) {
      resultCreatePrivateEvent.invitedUsersArray = [other.invitedUsersArray copy];
    } else {
      [resultCreatePrivateEvent.invitedUsersArray appendArray:other.invitedUsersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestCreatePrivateEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestCreatePrivateEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTitle:[input readString]];
        break;
      }
      case 18: {
        [self setLocation:[input readString]];
        break;
      }
      case 24: {
        [self setStartTime:[input readInt64]];
        break;
      }
      case 34: {
        [self setEventUuid1:[input readData]];
        break;
      }
      case 42: {
        [self setDescription:[input readString]];
        break;
      }
      case 48: {
        [self addInvitedUsers:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTitle {
  return resultCreatePrivateEvent.hasTitle;
}
- (NSString*) title {
  return resultCreatePrivateEvent.title;
}
- (AppRequestCreatePrivateEventBuilder*) setTitle:(NSString*) value {
  resultCreatePrivateEvent.hasTitle = YES;
  resultCreatePrivateEvent.title = value;
  return self;
}
- (AppRequestCreatePrivateEventBuilder*) clearTitle {
  resultCreatePrivateEvent.hasTitle = NO;
  resultCreatePrivateEvent.title = @"";
  return self;
}
- (BOOL) hasLocation {
  return resultCreatePrivateEvent.hasLocation;
}
- (NSString*) location {
  return resultCreatePrivateEvent.location;
}
- (AppRequestCreatePrivateEventBuilder*) setLocation:(NSString*) value {
  resultCreatePrivateEvent.hasLocation = YES;
  resultCreatePrivateEvent.location = value;
  return self;
}
- (AppRequestCreatePrivateEventBuilder*) clearLocation {
  resultCreatePrivateEvent.hasLocation = NO;
  resultCreatePrivateEvent.location = @"";
  return self;
}
- (BOOL) hasStartTime {
  return resultCreatePrivateEvent.hasStartTime;
}
- (SInt64) startTime {
  return resultCreatePrivateEvent.startTime;
}
- (AppRequestCreatePrivateEventBuilder*) setStartTime:(SInt64) value {
  resultCreatePrivateEvent.hasStartTime = YES;
  resultCreatePrivateEvent.startTime = value;
  return self;
}
- (AppRequestCreatePrivateEventBuilder*) clearStartTime {
  resultCreatePrivateEvent.hasStartTime = NO;
  resultCreatePrivateEvent.startTime = 0L;
  return self;
}
- (BOOL) hasEventUuid1 {
  return resultCreatePrivateEvent.hasEventUuid1;
}
- (NSData*) eventUuid1 {
  return resultCreatePrivateEvent.eventUuid1;
}
- (AppRequestCreatePrivateEventBuilder*) setEventUuid1:(NSData*) value {
  resultCreatePrivateEvent.hasEventUuid1 = YES;
  resultCreatePrivateEvent.eventUuid1 = value;
  return self;
}
- (AppRequestCreatePrivateEventBuilder*) clearEventUuid1 {
  resultCreatePrivateEvent.hasEventUuid1 = NO;
  resultCreatePrivateEvent.eventUuid1 = [NSData data];
  return self;
}
- (BOOL) hasDescription {
  return resultCreatePrivateEvent.hasDescription;
}
- (NSString*) pb_description {
  return resultCreatePrivateEvent.pb_description;
}
- (AppRequestCreatePrivateEventBuilder*) setDescription:(NSString*) value {
  resultCreatePrivateEvent.hasDescription = YES;
  resultCreatePrivateEvent.pb_description = value;
  return self;
}
- (AppRequestCreatePrivateEventBuilder*) clearDescription {
  resultCreatePrivateEvent.hasDescription = NO;
  resultCreatePrivateEvent.pb_description = @"";
  return self;
}
- (PBAppendableArray *)invitedUsers {
  return resultCreatePrivateEvent.invitedUsersArray;
}
- (SInt64)invitedUsersAtIndex:(NSUInteger)index {
  return [resultCreatePrivateEvent invitedUsersAtIndex:index];
}
- (AppRequestCreatePrivateEventBuilder *)addInvitedUsers:(SInt64)value {
  if (resultCreatePrivateEvent.invitedUsersArray == nil) {
    resultCreatePrivateEvent.invitedUsersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultCreatePrivateEvent.invitedUsersArray addInt64:value];
  return self;
}
- (AppRequestCreatePrivateEventBuilder *)setInvitedUsersArray:(NSArray *)array {
  resultCreatePrivateEvent.invitedUsersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppRequestCreatePrivateEventBuilder *)setInvitedUsersValues:(const SInt64 *)values count:(NSUInteger)count {
  resultCreatePrivateEvent.invitedUsersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppRequestCreatePrivateEventBuilder *)clearInvitedUsers {
  resultCreatePrivateEvent.invitedUsersArray = nil;
  return self;
}
@end

@interface AppRequestCreatePublicEvent ()
@property (strong) NSString* title;
@property (strong) NSString* location;
@property SInt64 startTime;
@property SInt64 endTime;
@property (strong) NSData* eventUuid1;
@property (strong) NSString* pb_description;
@end

@implementation AppRequestCreatePublicEvent

- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) _value_ {
  hasStartTime_ = !!_value_;
}
@synthesize startTime;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) _value_ {
  hasEndTime_ = !!_value_;
}
@synthesize endTime;
- (BOOL) hasEventUuid1 {
  return !!hasEventUuid1_;
}
- (void) setHasEventUuid1:(BOOL) _value_ {
  hasEventUuid1_ = !!_value_;
}
@synthesize eventUuid1;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
- (instancetype) init {
  if ((self = [super init])) {
    self.title = @"";
    self.location = @"";
    self.startTime = 0L;
    self.endTime = 0L;
    self.eventUuid1 = [NSData data];
    self.pb_description = @"";
  }
  return self;
}
static AppRequestCreatePublicEvent* defaultAppRequestCreatePublicEventInstance = nil;
+ (void) initialize {
  if (self == [AppRequestCreatePublicEvent class]) {
    defaultAppRequestCreatePublicEventInstance = [[AppRequestCreatePublicEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestCreatePublicEventInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestCreatePublicEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTitle) {
    return NO;
  }
  if (!self.hasLocation) {
    return NO;
  }
  if (!self.hasStartTime) {
    return NO;
  }
  if (!self.hasEndTime) {
    return NO;
  }
  if (!self.hasEventUuid1) {
    return NO;
  }
  if (!self.hasDescription) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeString:1 value:self.title];
  }
  if (self.hasLocation) {
    [output writeString:2 value:self.location];
  }
  if (self.hasStartTime) {
    [output writeInt64:3 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeInt64:4 value:self.endTime];
  }
  if (self.hasEventUuid1) {
    [output writeData:5 value:self.eventUuid1];
  }
  if (self.hasDescription) {
    [output writeString:6 value:self.pb_description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTitle) {
    size_ += computeStringSize(1, self.title);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(2, self.location);
  }
  if (self.hasStartTime) {
    size_ += computeInt64Size(3, self.startTime);
  }
  if (self.hasEndTime) {
    size_ += computeInt64Size(4, self.endTime);
  }
  if (self.hasEventUuid1) {
    size_ += computeDataSize(5, self.eventUuid1);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(6, self.pb_description);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestCreatePublicEvent*) parseFromData:(NSData*) data {
  return (AppRequestCreatePublicEvent*)[[[AppRequestCreatePublicEvent builder] mergeFromData:data] build];
}
+ (AppRequestCreatePublicEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestCreatePublicEvent*)[[[AppRequestCreatePublicEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestCreatePublicEvent*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestCreatePublicEvent*)[[[AppRequestCreatePublicEvent builder] mergeFromInputStream:input] build];
}
+ (AppRequestCreatePublicEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestCreatePublicEvent*)[[[AppRequestCreatePublicEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestCreatePublicEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestCreatePublicEvent*)[[[AppRequestCreatePublicEvent builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestCreatePublicEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestCreatePublicEvent*)[[[AppRequestCreatePublicEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestCreatePublicEventBuilder*) builder {
  return [[AppRequestCreatePublicEventBuilder alloc] init];
}
+ (AppRequestCreatePublicEventBuilder*) builderWithPrototype:(AppRequestCreatePublicEvent*) prototype {
  return [[AppRequestCreatePublicEvent builder] mergeFrom:prototype];
}
- (AppRequestCreatePublicEventBuilder*) builder {
  return [AppRequestCreatePublicEvent builder];
}
- (AppRequestCreatePublicEventBuilder*) toBuilder {
  return [AppRequestCreatePublicEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithLongLong:self.startTime]];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", [NSNumber numberWithLongLong:self.endTime]];
  }
  if (self.hasEventUuid1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventUuid1", self.eventUuid1];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  if (self.hasStartTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.startTime] forKey: @"startTime"];
  }
  if (self.hasEndTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.endTime] forKey: @"endTime"];
  }
  if (self.hasEventUuid1) {
    [dictionary setObject: self.eventUuid1 forKey: @"eventUuid1"];
  }
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestCreatePublicEvent class]]) {
    return NO;
  }
  AppRequestCreatePublicEvent *otherMessage = other;
  return
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      self.hasEndTime == otherMessage.hasEndTime &&
      (!self.hasEndTime || self.endTime == otherMessage.endTime) &&
      self.hasEventUuid1 == otherMessage.hasEventUuid1 &&
      (!self.hasEventUuid1 || [self.eventUuid1 isEqual:otherMessage.eventUuid1]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.startTime] hash];
  }
  if (self.hasEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.endTime] hash];
  }
  if (self.hasEventUuid1) {
    hashCode = hashCode * 31 + [self.eventUuid1 hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestCreatePublicEventBuilder()
@property (strong) AppRequestCreatePublicEvent* resultCreatePublicEvent;
@end

@implementation AppRequestCreatePublicEventBuilder
@synthesize resultCreatePublicEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreatePublicEvent = [[AppRequestCreatePublicEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreatePublicEvent;
}
- (AppRequestCreatePublicEventBuilder*) clear {
  self.resultCreatePublicEvent = [[AppRequestCreatePublicEvent alloc] init];
  return self;
}
- (AppRequestCreatePublicEventBuilder*) clone {
  return [AppRequestCreatePublicEvent builderWithPrototype:resultCreatePublicEvent];
}
- (AppRequestCreatePublicEvent*) defaultInstance {
  return [AppRequestCreatePublicEvent defaultInstance];
}
- (AppRequestCreatePublicEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestCreatePublicEvent*) buildPartial {
  AppRequestCreatePublicEvent* returnMe = resultCreatePublicEvent;
  self.resultCreatePublicEvent = nil;
  return returnMe;
}
- (AppRequestCreatePublicEventBuilder*) mergeFrom:(AppRequestCreatePublicEvent*) other {
  if (other == [AppRequestCreatePublicEvent defaultInstance]) {
    return self;
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  if (other.hasEventUuid1) {
    [self setEventUuid1:other.eventUuid1];
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestCreatePublicEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestCreatePublicEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTitle:[input readString]];
        break;
      }
      case 18: {
        [self setLocation:[input readString]];
        break;
      }
      case 24: {
        [self setStartTime:[input readInt64]];
        break;
      }
      case 32: {
        [self setEndTime:[input readInt64]];
        break;
      }
      case 42: {
        [self setEventUuid1:[input readData]];
        break;
      }
      case 50: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTitle {
  return resultCreatePublicEvent.hasTitle;
}
- (NSString*) title {
  return resultCreatePublicEvent.title;
}
- (AppRequestCreatePublicEventBuilder*) setTitle:(NSString*) value {
  resultCreatePublicEvent.hasTitle = YES;
  resultCreatePublicEvent.title = value;
  return self;
}
- (AppRequestCreatePublicEventBuilder*) clearTitle {
  resultCreatePublicEvent.hasTitle = NO;
  resultCreatePublicEvent.title = @"";
  return self;
}
- (BOOL) hasLocation {
  return resultCreatePublicEvent.hasLocation;
}
- (NSString*) location {
  return resultCreatePublicEvent.location;
}
- (AppRequestCreatePublicEventBuilder*) setLocation:(NSString*) value {
  resultCreatePublicEvent.hasLocation = YES;
  resultCreatePublicEvent.location = value;
  return self;
}
- (AppRequestCreatePublicEventBuilder*) clearLocation {
  resultCreatePublicEvent.hasLocation = NO;
  resultCreatePublicEvent.location = @"";
  return self;
}
- (BOOL) hasStartTime {
  return resultCreatePublicEvent.hasStartTime;
}
- (SInt64) startTime {
  return resultCreatePublicEvent.startTime;
}
- (AppRequestCreatePublicEventBuilder*) setStartTime:(SInt64) value {
  resultCreatePublicEvent.hasStartTime = YES;
  resultCreatePublicEvent.startTime = value;
  return self;
}
- (AppRequestCreatePublicEventBuilder*) clearStartTime {
  resultCreatePublicEvent.hasStartTime = NO;
  resultCreatePublicEvent.startTime = 0L;
  return self;
}
- (BOOL) hasEndTime {
  return resultCreatePublicEvent.hasEndTime;
}
- (SInt64) endTime {
  return resultCreatePublicEvent.endTime;
}
- (AppRequestCreatePublicEventBuilder*) setEndTime:(SInt64) value {
  resultCreatePublicEvent.hasEndTime = YES;
  resultCreatePublicEvent.endTime = value;
  return self;
}
- (AppRequestCreatePublicEventBuilder*) clearEndTime {
  resultCreatePublicEvent.hasEndTime = NO;
  resultCreatePublicEvent.endTime = 0L;
  return self;
}
- (BOOL) hasEventUuid1 {
  return resultCreatePublicEvent.hasEventUuid1;
}
- (NSData*) eventUuid1 {
  return resultCreatePublicEvent.eventUuid1;
}
- (AppRequestCreatePublicEventBuilder*) setEventUuid1:(NSData*) value {
  resultCreatePublicEvent.hasEventUuid1 = YES;
  resultCreatePublicEvent.eventUuid1 = value;
  return self;
}
- (AppRequestCreatePublicEventBuilder*) clearEventUuid1 {
  resultCreatePublicEvent.hasEventUuid1 = NO;
  resultCreatePublicEvent.eventUuid1 = [NSData data];
  return self;
}
- (BOOL) hasDescription {
  return resultCreatePublicEvent.hasDescription;
}
- (NSString*) pb_description {
  return resultCreatePublicEvent.pb_description;
}
- (AppRequestCreatePublicEventBuilder*) setDescription:(NSString*) value {
  resultCreatePublicEvent.hasDescription = YES;
  resultCreatePublicEvent.pb_description = value;
  return self;
}
- (AppRequestCreatePublicEventBuilder*) clearDescription {
  resultCreatePublicEvent.hasDescription = NO;
  resultCreatePublicEvent.pb_description = @"";
  return self;
}
@end

@interface AppRequestEventAccept ()
@property (strong) NSData* eventUuid1;
@end

@implementation AppRequestEventAccept

- (BOOL) hasEventUuid1 {
  return !!hasEventUuid1_;
}
- (void) setHasEventUuid1:(BOOL) _value_ {
  hasEventUuid1_ = !!_value_;
}
@synthesize eventUuid1;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventUuid1 = [NSData data];
  }
  return self;
}
static AppRequestEventAccept* defaultAppRequestEventAcceptInstance = nil;
+ (void) initialize {
  if (self == [AppRequestEventAccept class]) {
    defaultAppRequestEventAcceptInstance = [[AppRequestEventAccept alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestEventAcceptInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestEventAcceptInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventUuid1) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventUuid1) {
    [output writeData:1 value:self.eventUuid1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventUuid1) {
    size_ += computeDataSize(1, self.eventUuid1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestEventAccept*) parseFromData:(NSData*) data {
  return (AppRequestEventAccept*)[[[AppRequestEventAccept builder] mergeFromData:data] build];
}
+ (AppRequestEventAccept*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestEventAccept*)[[[AppRequestEventAccept builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestEventAccept*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestEventAccept*)[[[AppRequestEventAccept builder] mergeFromInputStream:input] build];
}
+ (AppRequestEventAccept*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestEventAccept*)[[[AppRequestEventAccept builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestEventAccept*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestEventAccept*)[[[AppRequestEventAccept builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestEventAccept*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestEventAccept*)[[[AppRequestEventAccept builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestEventAcceptBuilder*) builder {
  return [[AppRequestEventAcceptBuilder alloc] init];
}
+ (AppRequestEventAcceptBuilder*) builderWithPrototype:(AppRequestEventAccept*) prototype {
  return [[AppRequestEventAccept builder] mergeFrom:prototype];
}
- (AppRequestEventAcceptBuilder*) builder {
  return [AppRequestEventAccept builder];
}
- (AppRequestEventAcceptBuilder*) toBuilder {
  return [AppRequestEventAccept builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventUuid1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventUuid1", self.eventUuid1];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventUuid1) {
    [dictionary setObject: self.eventUuid1 forKey: @"eventUuid1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestEventAccept class]]) {
    return NO;
  }
  AppRequestEventAccept *otherMessage = other;
  return
      self.hasEventUuid1 == otherMessage.hasEventUuid1 &&
      (!self.hasEventUuid1 || [self.eventUuid1 isEqual:otherMessage.eventUuid1]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventUuid1) {
    hashCode = hashCode * 31 + [self.eventUuid1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestEventAcceptBuilder()
@property (strong) AppRequestEventAccept* resultEventAccept;
@end

@implementation AppRequestEventAcceptBuilder
@synthesize resultEventAccept;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEventAccept = [[AppRequestEventAccept alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEventAccept;
}
- (AppRequestEventAcceptBuilder*) clear {
  self.resultEventAccept = [[AppRequestEventAccept alloc] init];
  return self;
}
- (AppRequestEventAcceptBuilder*) clone {
  return [AppRequestEventAccept builderWithPrototype:resultEventAccept];
}
- (AppRequestEventAccept*) defaultInstance {
  return [AppRequestEventAccept defaultInstance];
}
- (AppRequestEventAccept*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestEventAccept*) buildPartial {
  AppRequestEventAccept* returnMe = resultEventAccept;
  self.resultEventAccept = nil;
  return returnMe;
}
- (AppRequestEventAcceptBuilder*) mergeFrom:(AppRequestEventAccept*) other {
  if (other == [AppRequestEventAccept defaultInstance]) {
    return self;
  }
  if (other.hasEventUuid1) {
    [self setEventUuid1:other.eventUuid1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestEventAcceptBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestEventAcceptBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventUuid1:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasEventUuid1 {
  return resultEventAccept.hasEventUuid1;
}
- (NSData*) eventUuid1 {
  return resultEventAccept.eventUuid1;
}
- (AppRequestEventAcceptBuilder*) setEventUuid1:(NSData*) value {
  resultEventAccept.hasEventUuid1 = YES;
  resultEventAccept.eventUuid1 = value;
  return self;
}
- (AppRequestEventAcceptBuilder*) clearEventUuid1 {
  resultEventAccept.hasEventUuid1 = NO;
  resultEventAccept.eventUuid1 = [NSData data];
  return self;
}
@end

@interface AppRequestPollingParameters ()
@property SInt64 offset;
@property SInt64 amount;
@end

@implementation AppRequestPollingParameters

- (BOOL) hasOffset {
  return !!hasOffset_;
}
- (void) setHasOffset:(BOOL) _value_ {
  hasOffset_ = !!_value_;
}
@synthesize offset;
- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) _value_ {
  hasAmount_ = !!_value_;
}
@synthesize amount;
- (instancetype) init {
  if ((self = [super init])) {
    self.offset = 0L;
    self.amount = 0L;
  }
  return self;
}
static AppRequestPollingParameters* defaultAppRequestPollingParametersInstance = nil;
+ (void) initialize {
  if (self == [AppRequestPollingParameters class]) {
    defaultAppRequestPollingParametersInstance = [[AppRequestPollingParameters alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestPollingParametersInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestPollingParametersInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOffset) {
    [output writeInt64:1 value:self.offset];
  }
  if (self.hasAmount) {
    [output writeInt64:2 value:self.amount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOffset) {
    size_ += computeInt64Size(1, self.offset);
  }
  if (self.hasAmount) {
    size_ += computeInt64Size(2, self.amount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestPollingParameters*) parseFromData:(NSData*) data {
  return (AppRequestPollingParameters*)[[[AppRequestPollingParameters builder] mergeFromData:data] build];
}
+ (AppRequestPollingParameters*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestPollingParameters*)[[[AppRequestPollingParameters builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestPollingParameters*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestPollingParameters*)[[[AppRequestPollingParameters builder] mergeFromInputStream:input] build];
}
+ (AppRequestPollingParameters*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestPollingParameters*)[[[AppRequestPollingParameters builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestPollingParameters*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestPollingParameters*)[[[AppRequestPollingParameters builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestPollingParameters*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestPollingParameters*)[[[AppRequestPollingParameters builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestPollingParametersBuilder*) builder {
  return [[AppRequestPollingParametersBuilder alloc] init];
}
+ (AppRequestPollingParametersBuilder*) builderWithPrototype:(AppRequestPollingParameters*) prototype {
  return [[AppRequestPollingParameters builder] mergeFrom:prototype];
}
- (AppRequestPollingParametersBuilder*) builder {
  return [AppRequestPollingParameters builder];
}
- (AppRequestPollingParametersBuilder*) toBuilder {
  return [AppRequestPollingParameters builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOffset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offset", [NSNumber numberWithLongLong:self.offset]];
  }
  if (self.hasAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amount", [NSNumber numberWithLongLong:self.amount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOffset) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.offset] forKey: @"offset"];
  }
  if (self.hasAmount) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.amount] forKey: @"amount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestPollingParameters class]]) {
    return NO;
  }
  AppRequestPollingParameters *otherMessage = other;
  return
      self.hasOffset == otherMessage.hasOffset &&
      (!self.hasOffset || self.offset == otherMessage.offset) &&
      self.hasAmount == otherMessage.hasAmount &&
      (!self.hasAmount || self.amount == otherMessage.amount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOffset) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.offset] hash];
  }
  if (self.hasAmount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.amount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestPollingParametersBuilder()
@property (strong) AppRequestPollingParameters* resultPollingParameters;
@end

@implementation AppRequestPollingParametersBuilder
@synthesize resultPollingParameters;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPollingParameters = [[AppRequestPollingParameters alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPollingParameters;
}
- (AppRequestPollingParametersBuilder*) clear {
  self.resultPollingParameters = [[AppRequestPollingParameters alloc] init];
  return self;
}
- (AppRequestPollingParametersBuilder*) clone {
  return [AppRequestPollingParameters builderWithPrototype:resultPollingParameters];
}
- (AppRequestPollingParameters*) defaultInstance {
  return [AppRequestPollingParameters defaultInstance];
}
- (AppRequestPollingParameters*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestPollingParameters*) buildPartial {
  AppRequestPollingParameters* returnMe = resultPollingParameters;
  self.resultPollingParameters = nil;
  return returnMe;
}
- (AppRequestPollingParametersBuilder*) mergeFrom:(AppRequestPollingParameters*) other {
  if (other == [AppRequestPollingParameters defaultInstance]) {
    return self;
  }
  if (other.hasOffset) {
    [self setOffset:other.offset];
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestPollingParametersBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestPollingParametersBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOffset:[input readInt64]];
        break;
      }
      case 16: {
        [self setAmount:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasOffset {
  return resultPollingParameters.hasOffset;
}
- (SInt64) offset {
  return resultPollingParameters.offset;
}
- (AppRequestPollingParametersBuilder*) setOffset:(SInt64) value {
  resultPollingParameters.hasOffset = YES;
  resultPollingParameters.offset = value;
  return self;
}
- (AppRequestPollingParametersBuilder*) clearOffset {
  resultPollingParameters.hasOffset = NO;
  resultPollingParameters.offset = 0L;
  return self;
}
- (BOOL) hasAmount {
  return resultPollingParameters.hasAmount;
}
- (SInt64) amount {
  return resultPollingParameters.amount;
}
- (AppRequestPollingParametersBuilder*) setAmount:(SInt64) value {
  resultPollingParameters.hasAmount = YES;
  resultPollingParameters.amount = value;
  return self;
}
- (AppRequestPollingParametersBuilder*) clearAmount {
  resultPollingParameters.hasAmount = NO;
  resultPollingParameters.amount = 0L;
  return self;
}
@end

@interface AppRequestFriendRequest ()
@property SInt64 destinationUser;
@property (strong) NSString* message;
@end

@implementation AppRequestFriendRequest

- (BOOL) hasDestinationUser {
  return !!hasDestinationUser_;
}
- (void) setHasDestinationUser:(BOOL) _value_ {
  hasDestinationUser_ = !!_value_;
}
@synthesize destinationUser;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.destinationUser = 0L;
    self.message = @"";
  }
  return self;
}
static AppRequestFriendRequest* defaultAppRequestFriendRequestInstance = nil;
+ (void) initialize {
  if (self == [AppRequestFriendRequest class]) {
    defaultAppRequestFriendRequestInstance = [[AppRequestFriendRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestFriendRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestFriendRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDestinationUser) {
    return NO;
  }
  if (!self.hasMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDestinationUser) {
    [output writeInt64:1 value:self.destinationUser];
  }
  if (self.hasMessage) {
    [output writeString:2 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDestinationUser) {
    size_ += computeInt64Size(1, self.destinationUser);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(2, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestFriendRequest*) parseFromData:(NSData*) data {
  return (AppRequestFriendRequest*)[[[AppRequestFriendRequest builder] mergeFromData:data] build];
}
+ (AppRequestFriendRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestFriendRequest*)[[[AppRequestFriendRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestFriendRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestFriendRequest*)[[[AppRequestFriendRequest builder] mergeFromInputStream:input] build];
}
+ (AppRequestFriendRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestFriendRequest*)[[[AppRequestFriendRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestFriendRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestFriendRequest*)[[[AppRequestFriendRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestFriendRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestFriendRequest*)[[[AppRequestFriendRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestFriendRequestBuilder*) builder {
  return [[AppRequestFriendRequestBuilder alloc] init];
}
+ (AppRequestFriendRequestBuilder*) builderWithPrototype:(AppRequestFriendRequest*) prototype {
  return [[AppRequestFriendRequest builder] mergeFrom:prototype];
}
- (AppRequestFriendRequestBuilder*) builder {
  return [AppRequestFriendRequest builder];
}
- (AppRequestFriendRequestBuilder*) toBuilder {
  return [AppRequestFriendRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDestinationUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"destinationUser", [NSNumber numberWithLongLong:self.destinationUser]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDestinationUser) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.destinationUser] forKey: @"destinationUser"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestFriendRequest class]]) {
    return NO;
  }
  AppRequestFriendRequest *otherMessage = other;
  return
      self.hasDestinationUser == otherMessage.hasDestinationUser &&
      (!self.hasDestinationUser || self.destinationUser == otherMessage.destinationUser) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDestinationUser) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.destinationUser] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestFriendRequestBuilder()
@property (strong) AppRequestFriendRequest* resultFriendRequest;
@end

@implementation AppRequestFriendRequestBuilder
@synthesize resultFriendRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFriendRequest = [[AppRequestFriendRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFriendRequest;
}
- (AppRequestFriendRequestBuilder*) clear {
  self.resultFriendRequest = [[AppRequestFriendRequest alloc] init];
  return self;
}
- (AppRequestFriendRequestBuilder*) clone {
  return [AppRequestFriendRequest builderWithPrototype:resultFriendRequest];
}
- (AppRequestFriendRequest*) defaultInstance {
  return [AppRequestFriendRequest defaultInstance];
}
- (AppRequestFriendRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestFriendRequest*) buildPartial {
  AppRequestFriendRequest* returnMe = resultFriendRequest;
  self.resultFriendRequest = nil;
  return returnMe;
}
- (AppRequestFriendRequestBuilder*) mergeFrom:(AppRequestFriendRequest*) other {
  if (other == [AppRequestFriendRequest defaultInstance]) {
    return self;
  }
  if (other.hasDestinationUser) {
    [self setDestinationUser:other.destinationUser];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestFriendRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestFriendRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDestinationUser:[input readInt64]];
        break;
      }
      case 18: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDestinationUser {
  return resultFriendRequest.hasDestinationUser;
}
- (SInt64) destinationUser {
  return resultFriendRequest.destinationUser;
}
- (AppRequestFriendRequestBuilder*) setDestinationUser:(SInt64) value {
  resultFriendRequest.hasDestinationUser = YES;
  resultFriendRequest.destinationUser = value;
  return self;
}
- (AppRequestFriendRequestBuilder*) clearDestinationUser {
  resultFriendRequest.hasDestinationUser = NO;
  resultFriendRequest.destinationUser = 0L;
  return self;
}
- (BOOL) hasMessage {
  return resultFriendRequest.hasMessage;
}
- (NSString*) message {
  return resultFriendRequest.message;
}
- (AppRequestFriendRequestBuilder*) setMessage:(NSString*) value {
  resultFriendRequest.hasMessage = YES;
  resultFriendRequest.message = value;
  return self;
}
- (AppRequestFriendRequestBuilder*) clearMessage {
  resultFriendRequest.hasMessage = NO;
  resultFriendRequest.message = @"";
  return self;
}
@end

@interface AppRequestAcceptFriendRequest ()
@property SInt64 requestingUserId;
@end

@implementation AppRequestAcceptFriendRequest

- (BOOL) hasRequestingUserId {
  return !!hasRequestingUserId_;
}
- (void) setHasRequestingUserId:(BOOL) _value_ {
  hasRequestingUserId_ = !!_value_;
}
@synthesize requestingUserId;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestingUserId = 0L;
  }
  return self;
}
static AppRequestAcceptFriendRequest* defaultAppRequestAcceptFriendRequestInstance = nil;
+ (void) initialize {
  if (self == [AppRequestAcceptFriendRequest class]) {
    defaultAppRequestAcceptFriendRequestInstance = [[AppRequestAcceptFriendRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestAcceptFriendRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestAcceptFriendRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRequestingUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestingUserId) {
    [output writeInt64:1 value:self.requestingUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestingUserId) {
    size_ += computeInt64Size(1, self.requestingUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestAcceptFriendRequest*) parseFromData:(NSData*) data {
  return (AppRequestAcceptFriendRequest*)[[[AppRequestAcceptFriendRequest builder] mergeFromData:data] build];
}
+ (AppRequestAcceptFriendRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestAcceptFriendRequest*)[[[AppRequestAcceptFriendRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestAcceptFriendRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestAcceptFriendRequest*)[[[AppRequestAcceptFriendRequest builder] mergeFromInputStream:input] build];
}
+ (AppRequestAcceptFriendRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestAcceptFriendRequest*)[[[AppRequestAcceptFriendRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestAcceptFriendRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestAcceptFriendRequest*)[[[AppRequestAcceptFriendRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestAcceptFriendRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestAcceptFriendRequest*)[[[AppRequestAcceptFriendRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestAcceptFriendRequestBuilder*) builder {
  return [[AppRequestAcceptFriendRequestBuilder alloc] init];
}
+ (AppRequestAcceptFriendRequestBuilder*) builderWithPrototype:(AppRequestAcceptFriendRequest*) prototype {
  return [[AppRequestAcceptFriendRequest builder] mergeFrom:prototype];
}
- (AppRequestAcceptFriendRequestBuilder*) builder {
  return [AppRequestAcceptFriendRequest builder];
}
- (AppRequestAcceptFriendRequestBuilder*) toBuilder {
  return [AppRequestAcceptFriendRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestingUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestingUserId", [NSNumber numberWithLongLong:self.requestingUserId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestingUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.requestingUserId] forKey: @"requestingUserId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestAcceptFriendRequest class]]) {
    return NO;
  }
  AppRequestAcceptFriendRequest *otherMessage = other;
  return
      self.hasRequestingUserId == otherMessage.hasRequestingUserId &&
      (!self.hasRequestingUserId || self.requestingUserId == otherMessage.requestingUserId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestingUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.requestingUserId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestAcceptFriendRequestBuilder()
@property (strong) AppRequestAcceptFriendRequest* resultAcceptFriendRequest;
@end

@implementation AppRequestAcceptFriendRequestBuilder
@synthesize resultAcceptFriendRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcceptFriendRequest = [[AppRequestAcceptFriendRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcceptFriendRequest;
}
- (AppRequestAcceptFriendRequestBuilder*) clear {
  self.resultAcceptFriendRequest = [[AppRequestAcceptFriendRequest alloc] init];
  return self;
}
- (AppRequestAcceptFriendRequestBuilder*) clone {
  return [AppRequestAcceptFriendRequest builderWithPrototype:resultAcceptFriendRequest];
}
- (AppRequestAcceptFriendRequest*) defaultInstance {
  return [AppRequestAcceptFriendRequest defaultInstance];
}
- (AppRequestAcceptFriendRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestAcceptFriendRequest*) buildPartial {
  AppRequestAcceptFriendRequest* returnMe = resultAcceptFriendRequest;
  self.resultAcceptFriendRequest = nil;
  return returnMe;
}
- (AppRequestAcceptFriendRequestBuilder*) mergeFrom:(AppRequestAcceptFriendRequest*) other {
  if (other == [AppRequestAcceptFriendRequest defaultInstance]) {
    return self;
  }
  if (other.hasRequestingUserId) {
    [self setRequestingUserId:other.requestingUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestAcceptFriendRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestAcceptFriendRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRequestingUserId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasRequestingUserId {
  return resultAcceptFriendRequest.hasRequestingUserId;
}
- (SInt64) requestingUserId {
  return resultAcceptFriendRequest.requestingUserId;
}
- (AppRequestAcceptFriendRequestBuilder*) setRequestingUserId:(SInt64) value {
  resultAcceptFriendRequest.hasRequestingUserId = YES;
  resultAcceptFriendRequest.requestingUserId = value;
  return self;
}
- (AppRequestAcceptFriendRequestBuilder*) clearRequestingUserId {
  resultAcceptFriendRequest.hasRequestingUserId = NO;
  resultAcceptFriendRequest.requestingUserId = 0L;
  return self;
}
@end

@interface AppRequestAlbumPhoto ()
@property (strong) NSData* photo;
@property (strong) NSString* pb_description;
@end

@implementation AppRequestAlbumPhoto

- (BOOL) hasPhoto {
  return !!hasPhoto_;
}
- (void) setHasPhoto:(BOOL) _value_ {
  hasPhoto_ = !!_value_;
}
@synthesize photo;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
- (instancetype) init {
  if ((self = [super init])) {
    self.photo = [NSData data];
    self.pb_description = @"";
  }
  return self;
}
static AppRequestAlbumPhoto* defaultAppRequestAlbumPhotoInstance = nil;
+ (void) initialize {
  if (self == [AppRequestAlbumPhoto class]) {
    defaultAppRequestAlbumPhotoInstance = [[AppRequestAlbumPhoto alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestAlbumPhotoInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestAlbumPhotoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPhoto) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoto) {
    [output writeData:1 value:self.photo];
  }
  if (self.hasDescription) {
    [output writeString:2 value:self.pb_description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoto) {
    size_ += computeDataSize(1, self.photo);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(2, self.pb_description);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestAlbumPhoto*) parseFromData:(NSData*) data {
  return (AppRequestAlbumPhoto*)[[[AppRequestAlbumPhoto builder] mergeFromData:data] build];
}
+ (AppRequestAlbumPhoto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestAlbumPhoto*)[[[AppRequestAlbumPhoto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestAlbumPhoto*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestAlbumPhoto*)[[[AppRequestAlbumPhoto builder] mergeFromInputStream:input] build];
}
+ (AppRequestAlbumPhoto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestAlbumPhoto*)[[[AppRequestAlbumPhoto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestAlbumPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestAlbumPhoto*)[[[AppRequestAlbumPhoto builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestAlbumPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestAlbumPhoto*)[[[AppRequestAlbumPhoto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestAlbumPhotoBuilder*) builder {
  return [[AppRequestAlbumPhotoBuilder alloc] init];
}
+ (AppRequestAlbumPhotoBuilder*) builderWithPrototype:(AppRequestAlbumPhoto*) prototype {
  return [[AppRequestAlbumPhoto builder] mergeFrom:prototype];
}
- (AppRequestAlbumPhotoBuilder*) builder {
  return [AppRequestAlbumPhoto builder];
}
- (AppRequestAlbumPhotoBuilder*) toBuilder {
  return [AppRequestAlbumPhoto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoto) {
    [output appendFormat:@"%@%@: %@\n", indent, @"photo", self.photo];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoto) {
    [dictionary setObject: self.photo forKey: @"photo"];
  }
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestAlbumPhoto class]]) {
    return NO;
  }
  AppRequestAlbumPhoto *otherMessage = other;
  return
      self.hasPhoto == otherMessage.hasPhoto &&
      (!self.hasPhoto || [self.photo isEqual:otherMessage.photo]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoto) {
    hashCode = hashCode * 31 + [self.photo hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestAlbumPhotoBuilder()
@property (strong) AppRequestAlbumPhoto* resultAlbumPhoto;
@end

@implementation AppRequestAlbumPhotoBuilder
@synthesize resultAlbumPhoto;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAlbumPhoto = [[AppRequestAlbumPhoto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAlbumPhoto;
}
- (AppRequestAlbumPhotoBuilder*) clear {
  self.resultAlbumPhoto = [[AppRequestAlbumPhoto alloc] init];
  return self;
}
- (AppRequestAlbumPhotoBuilder*) clone {
  return [AppRequestAlbumPhoto builderWithPrototype:resultAlbumPhoto];
}
- (AppRequestAlbumPhoto*) defaultInstance {
  return [AppRequestAlbumPhoto defaultInstance];
}
- (AppRequestAlbumPhoto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestAlbumPhoto*) buildPartial {
  AppRequestAlbumPhoto* returnMe = resultAlbumPhoto;
  self.resultAlbumPhoto = nil;
  return returnMe;
}
- (AppRequestAlbumPhotoBuilder*) mergeFrom:(AppRequestAlbumPhoto*) other {
  if (other == [AppRequestAlbumPhoto defaultInstance]) {
    return self;
  }
  if (other.hasPhoto) {
    [self setPhoto:other.photo];
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestAlbumPhotoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestAlbumPhotoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPhoto:[input readData]];
        break;
      }
      case 18: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPhoto {
  return resultAlbumPhoto.hasPhoto;
}
- (NSData*) photo {
  return resultAlbumPhoto.photo;
}
- (AppRequestAlbumPhotoBuilder*) setPhoto:(NSData*) value {
  resultAlbumPhoto.hasPhoto = YES;
  resultAlbumPhoto.photo = value;
  return self;
}
- (AppRequestAlbumPhotoBuilder*) clearPhoto {
  resultAlbumPhoto.hasPhoto = NO;
  resultAlbumPhoto.photo = [NSData data];
  return self;
}
- (BOOL) hasDescription {
  return resultAlbumPhoto.hasDescription;
}
- (NSString*) pb_description {
  return resultAlbumPhoto.pb_description;
}
- (AppRequestAlbumPhotoBuilder*) setDescription:(NSString*) value {
  resultAlbumPhoto.hasDescription = YES;
  resultAlbumPhoto.pb_description = value;
  return self;
}
- (AppRequestAlbumPhotoBuilder*) clearDescription {
  resultAlbumPhoto.hasDescription = NO;
  resultAlbumPhoto.pb_description = @"";
  return self;
}
@end

@interface AppRequestPhotoAlbum ()
@property (strong) NSMutableArray * photosArray;
@property (strong) NSString* albumDescription;
@end

@implementation AppRequestPhotoAlbum

@synthesize photosArray;
@dynamic photos;
- (BOOL) hasAlbumDescription {
  return !!hasAlbumDescription_;
}
- (void) setHasAlbumDescription:(BOOL) _value_ {
  hasAlbumDescription_ = !!_value_;
}
@synthesize albumDescription;
- (instancetype) init {
  if ((self = [super init])) {
    self.albumDescription = @"";
  }
  return self;
}
static AppRequestPhotoAlbum* defaultAppRequestPhotoAlbumInstance = nil;
+ (void) initialize {
  if (self == [AppRequestPhotoAlbum class]) {
    defaultAppRequestPhotoAlbumInstance = [[AppRequestPhotoAlbum alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestPhotoAlbumInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestPhotoAlbumInstance;
}
- (NSArray *)photos {
  return photosArray;
}
- (AppRequestAlbumPhoto*)photosAtIndex:(NSUInteger)index {
  return [photosArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitphotos = YES;
   [self.photos enumerateObjectsUsingBlock:^(AppRequestAlbumPhoto *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitphotos = NO;
      *stop = YES;
    }
  }];
  if (!isInitphotos) return isInitphotos;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.photosArray enumerateObjectsUsingBlock:^(AppRequestAlbumPhoto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasAlbumDescription) {
    [output writeString:2 value:self.albumDescription];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.photosArray enumerateObjectsUsingBlock:^(AppRequestAlbumPhoto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasAlbumDescription) {
    size_ += computeStringSize(2, self.albumDescription);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestPhotoAlbum*) parseFromData:(NSData*) data {
  return (AppRequestPhotoAlbum*)[[[AppRequestPhotoAlbum builder] mergeFromData:data] build];
}
+ (AppRequestPhotoAlbum*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestPhotoAlbum*)[[[AppRequestPhotoAlbum builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestPhotoAlbum*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestPhotoAlbum*)[[[AppRequestPhotoAlbum builder] mergeFromInputStream:input] build];
}
+ (AppRequestPhotoAlbum*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestPhotoAlbum*)[[[AppRequestPhotoAlbum builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestPhotoAlbum*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestPhotoAlbum*)[[[AppRequestPhotoAlbum builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestPhotoAlbum*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestPhotoAlbum*)[[[AppRequestPhotoAlbum builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestPhotoAlbumBuilder*) builder {
  return [[AppRequestPhotoAlbumBuilder alloc] init];
}
+ (AppRequestPhotoAlbumBuilder*) builderWithPrototype:(AppRequestPhotoAlbum*) prototype {
  return [[AppRequestPhotoAlbum builder] mergeFrom:prototype];
}
- (AppRequestPhotoAlbumBuilder*) builder {
  return [AppRequestPhotoAlbum builder];
}
- (AppRequestPhotoAlbumBuilder*) toBuilder {
  return [AppRequestPhotoAlbum builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.photosArray enumerateObjectsUsingBlock:^(AppRequestAlbumPhoto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"photos"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAlbumDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"albumDescription", self.albumDescription];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (AppRequestAlbumPhoto* element in self.photosArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"photos"];
  }
  if (self.hasAlbumDescription) {
    [dictionary setObject: self.albumDescription forKey: @"albumDescription"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestPhotoAlbum class]]) {
    return NO;
  }
  AppRequestPhotoAlbum *otherMessage = other;
  return
      [self.photosArray isEqualToArray:otherMessage.photosArray] &&
      self.hasAlbumDescription == otherMessage.hasAlbumDescription &&
      (!self.hasAlbumDescription || [self.albumDescription isEqual:otherMessage.albumDescription]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.photosArray enumerateObjectsUsingBlock:^(AppRequestAlbumPhoto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAlbumDescription) {
    hashCode = hashCode * 31 + [self.albumDescription hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestPhotoAlbumBuilder()
@property (strong) AppRequestPhotoAlbum* resultPhotoAlbum;
@end

@implementation AppRequestPhotoAlbumBuilder
@synthesize resultPhotoAlbum;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhotoAlbum = [[AppRequestPhotoAlbum alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhotoAlbum;
}
- (AppRequestPhotoAlbumBuilder*) clear {
  self.resultPhotoAlbum = [[AppRequestPhotoAlbum alloc] init];
  return self;
}
- (AppRequestPhotoAlbumBuilder*) clone {
  return [AppRequestPhotoAlbum builderWithPrototype:resultPhotoAlbum];
}
- (AppRequestPhotoAlbum*) defaultInstance {
  return [AppRequestPhotoAlbum defaultInstance];
}
- (AppRequestPhotoAlbum*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestPhotoAlbum*) buildPartial {
  AppRequestPhotoAlbum* returnMe = resultPhotoAlbum;
  self.resultPhotoAlbum = nil;
  return returnMe;
}
- (AppRequestPhotoAlbumBuilder*) mergeFrom:(AppRequestPhotoAlbum*) other {
  if (other == [AppRequestPhotoAlbum defaultInstance]) {
    return self;
  }
  if (other.photosArray.count > 0) {
    if (resultPhotoAlbum.photosArray == nil) {
      resultPhotoAlbum.photosArray = [[NSMutableArray alloc] initWithArray:other.photosArray];
    } else {
      [resultPhotoAlbum.photosArray addObjectsFromArray:other.photosArray];
    }
  }
  if (other.hasAlbumDescription) {
    [self setAlbumDescription:other.albumDescription];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestPhotoAlbumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestPhotoAlbumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        AppRequestAlbumPhotoBuilder* subBuilder = [AppRequestAlbumPhoto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPhotos:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setAlbumDescription:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)photos {
  return resultPhotoAlbum.photosArray;
}
- (AppRequestAlbumPhoto*)photosAtIndex:(NSUInteger)index {
  return [resultPhotoAlbum photosAtIndex:index];
}
- (AppRequestPhotoAlbumBuilder *)addPhotos:(AppRequestAlbumPhoto*)value {
  if (resultPhotoAlbum.photosArray == nil) {
    resultPhotoAlbum.photosArray = [[NSMutableArray alloc]init];
  }
  [resultPhotoAlbum.photosArray addObject:value];
  return self;
}
- (AppRequestPhotoAlbumBuilder *)setPhotosArray:(NSArray *)array {
  resultPhotoAlbum.photosArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AppRequestPhotoAlbumBuilder *)clearPhotos {
  resultPhotoAlbum.photosArray = nil;
  return self;
}
- (BOOL) hasAlbumDescription {
  return resultPhotoAlbum.hasAlbumDescription;
}
- (NSString*) albumDescription {
  return resultPhotoAlbum.albumDescription;
}
- (AppRequestPhotoAlbumBuilder*) setAlbumDescription:(NSString*) value {
  resultPhotoAlbum.hasAlbumDescription = YES;
  resultPhotoAlbum.albumDescription = value;
  return self;
}
- (AppRequestPhotoAlbumBuilder*) clearAlbumDescription {
  resultPhotoAlbum.hasAlbumDescription = NO;
  resultPhotoAlbum.albumDescription = @"";
  return self;
}
@end

@interface AppRequestUpdateProfile ()
@property (strong) NSString* email;
@property (strong) NSString* pb_description;
@property (strong) NSString* location;
@property (strong) NSString* nickname;
@property (strong) NSString* password;
@property (strong) NSData* profilePhoto;
@property (strong) NSMutableArray * personalAlbumsArray;
@end

@implementation AppRequestUpdateProfile

- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) _value_ {
  hasNickname_ = !!_value_;
}
@synthesize nickname;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasProfilePhoto {
  return !!hasProfilePhoto_;
}
- (void) setHasProfilePhoto:(BOOL) _value_ {
  hasProfilePhoto_ = !!_value_;
}
@synthesize profilePhoto;
@synthesize personalAlbumsArray;
@dynamic personalAlbums;
- (instancetype) init {
  if ((self = [super init])) {
    self.email = @"";
    self.pb_description = @"";
    self.location = @"";
    self.nickname = @"";
    self.password = @"";
    self.profilePhoto = [NSData data];
  }
  return self;
}
static AppRequestUpdateProfile* defaultAppRequestUpdateProfileInstance = nil;
+ (void) initialize {
  if (self == [AppRequestUpdateProfile class]) {
    defaultAppRequestUpdateProfileInstance = [[AppRequestUpdateProfile alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppRequestUpdateProfileInstance;
}
- (instancetype) defaultInstance {
  return defaultAppRequestUpdateProfileInstance;
}
- (NSArray *)personalAlbums {
  return personalAlbumsArray;
}
- (AppRequestPhotoAlbum*)personalAlbumsAtIndex:(NSUInteger)index {
  return [personalAlbumsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitpersonalAlbums = YES;
   [self.personalAlbums enumerateObjectsUsingBlock:^(AppRequestPhotoAlbum *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitpersonalAlbums = NO;
      *stop = YES;
    }
  }];
  if (!isInitpersonalAlbums) return isInitpersonalAlbums;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEmail) {
    [output writeString:1 value:self.email];
  }
  if (self.hasDescription) {
    [output writeString:2 value:self.pb_description];
  }
  if (self.hasLocation) {
    [output writeString:3 value:self.location];
  }
  if (self.hasNickname) {
    [output writeString:4 value:self.nickname];
  }
  if (self.hasPassword) {
    [output writeString:5 value:self.password];
  }
  if (self.hasProfilePhoto) {
    [output writeData:6 value:self.profilePhoto];
  }
  [self.personalAlbumsArray enumerateObjectsUsingBlock:^(AppRequestPhotoAlbum *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEmail) {
    size_ += computeStringSize(1, self.email);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(2, self.pb_description);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(3, self.location);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(4, self.nickname);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(5, self.password);
  }
  if (self.hasProfilePhoto) {
    size_ += computeDataSize(6, self.profilePhoto);
  }
  [self.personalAlbumsArray enumerateObjectsUsingBlock:^(AppRequestPhotoAlbum *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppRequestUpdateProfile*) parseFromData:(NSData*) data {
  return (AppRequestUpdateProfile*)[[[AppRequestUpdateProfile builder] mergeFromData:data] build];
}
+ (AppRequestUpdateProfile*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestUpdateProfile*)[[[AppRequestUpdateProfile builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppRequestUpdateProfile*) parseFromInputStream:(NSInputStream*) input {
  return (AppRequestUpdateProfile*)[[[AppRequestUpdateProfile builder] mergeFromInputStream:input] build];
}
+ (AppRequestUpdateProfile*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestUpdateProfile*)[[[AppRequestUpdateProfile builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestUpdateProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppRequestUpdateProfile*)[[[AppRequestUpdateProfile builder] mergeFromCodedInputStream:input] build];
}
+ (AppRequestUpdateProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppRequestUpdateProfile*)[[[AppRequestUpdateProfile builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppRequestUpdateProfileBuilder*) builder {
  return [[AppRequestUpdateProfileBuilder alloc] init];
}
+ (AppRequestUpdateProfileBuilder*) builderWithPrototype:(AppRequestUpdateProfile*) prototype {
  return [[AppRequestUpdateProfile builder] mergeFrom:prototype];
}
- (AppRequestUpdateProfileBuilder*) builder {
  return [AppRequestUpdateProfile builder];
}
- (AppRequestUpdateProfileBuilder*) toBuilder {
  return [AppRequestUpdateProfile builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasProfilePhoto) {
    [output appendFormat:@"%@%@: %@\n", indent, @"profilePhoto", self.profilePhoto];
  }
  [self.personalAlbumsArray enumerateObjectsUsingBlock:^(AppRequestPhotoAlbum *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"personalAlbums"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  if (self.hasNickname) {
    [dictionary setObject: self.nickname forKey: @"nickname"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasProfilePhoto) {
    [dictionary setObject: self.profilePhoto forKey: @"profilePhoto"];
  }
  for (AppRequestPhotoAlbum* element in self.personalAlbumsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"personalAlbums"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppRequestUpdateProfile class]]) {
    return NO;
  }
  AppRequestUpdateProfile *otherMessage = other;
  return
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasProfilePhoto == otherMessage.hasProfilePhoto &&
      (!self.hasProfilePhoto || [self.profilePhoto isEqual:otherMessage.profilePhoto]) &&
      [self.personalAlbumsArray isEqualToArray:otherMessage.personalAlbumsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasProfilePhoto) {
    hashCode = hashCode * 31 + [self.profilePhoto hash];
  }
  [self.personalAlbumsArray enumerateObjectsUsingBlock:^(AppRequestPhotoAlbum *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppRequestUpdateProfileBuilder()
@property (strong) AppRequestUpdateProfile* resultUpdateProfile;
@end

@implementation AppRequestUpdateProfileBuilder
@synthesize resultUpdateProfile;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUpdateProfile = [[AppRequestUpdateProfile alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUpdateProfile;
}
- (AppRequestUpdateProfileBuilder*) clear {
  self.resultUpdateProfile = [[AppRequestUpdateProfile alloc] init];
  return self;
}
- (AppRequestUpdateProfileBuilder*) clone {
  return [AppRequestUpdateProfile builderWithPrototype:resultUpdateProfile];
}
- (AppRequestUpdateProfile*) defaultInstance {
  return [AppRequestUpdateProfile defaultInstance];
}
- (AppRequestUpdateProfile*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequestUpdateProfile*) buildPartial {
  AppRequestUpdateProfile* returnMe = resultUpdateProfile;
  self.resultUpdateProfile = nil;
  return returnMe;
}
- (AppRequestUpdateProfileBuilder*) mergeFrom:(AppRequestUpdateProfile*) other {
  if (other == [AppRequestUpdateProfile defaultInstance]) {
    return self;
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasProfilePhoto) {
    [self setProfilePhoto:other.profilePhoto];
  }
  if (other.personalAlbumsArray.count > 0) {
    if (resultUpdateProfile.personalAlbumsArray == nil) {
      resultUpdateProfile.personalAlbumsArray = [[NSMutableArray alloc] initWithArray:other.personalAlbumsArray];
    } else {
      [resultUpdateProfile.personalAlbumsArray addObjectsFromArray:other.personalAlbumsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestUpdateProfileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestUpdateProfileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEmail:[input readString]];
        break;
      }
      case 18: {
        [self setDescription:[input readString]];
        break;
      }
      case 26: {
        [self setLocation:[input readString]];
        break;
      }
      case 34: {
        [self setNickname:[input readString]];
        break;
      }
      case 42: {
        [self setPassword:[input readString]];
        break;
      }
      case 50: {
        [self setProfilePhoto:[input readData]];
        break;
      }
      case 58: {
        AppRequestPhotoAlbumBuilder* subBuilder = [AppRequestPhotoAlbum builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPersonalAlbums:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEmail {
  return resultUpdateProfile.hasEmail;
}
- (NSString*) email {
  return resultUpdateProfile.email;
}
- (AppRequestUpdateProfileBuilder*) setEmail:(NSString*) value {
  resultUpdateProfile.hasEmail = YES;
  resultUpdateProfile.email = value;
  return self;
}
- (AppRequestUpdateProfileBuilder*) clearEmail {
  resultUpdateProfile.hasEmail = NO;
  resultUpdateProfile.email = @"";
  return self;
}
- (BOOL) hasDescription {
  return resultUpdateProfile.hasDescription;
}
- (NSString*) pb_description {
  return resultUpdateProfile.pb_description;
}
- (AppRequestUpdateProfileBuilder*) setDescription:(NSString*) value {
  resultUpdateProfile.hasDescription = YES;
  resultUpdateProfile.pb_description = value;
  return self;
}
- (AppRequestUpdateProfileBuilder*) clearDescription {
  resultUpdateProfile.hasDescription = NO;
  resultUpdateProfile.pb_description = @"";
  return self;
}
- (BOOL) hasLocation {
  return resultUpdateProfile.hasLocation;
}
- (NSString*) location {
  return resultUpdateProfile.location;
}
- (AppRequestUpdateProfileBuilder*) setLocation:(NSString*) value {
  resultUpdateProfile.hasLocation = YES;
  resultUpdateProfile.location = value;
  return self;
}
- (AppRequestUpdateProfileBuilder*) clearLocation {
  resultUpdateProfile.hasLocation = NO;
  resultUpdateProfile.location = @"";
  return self;
}
- (BOOL) hasNickname {
  return resultUpdateProfile.hasNickname;
}
- (NSString*) nickname {
  return resultUpdateProfile.nickname;
}
- (AppRequestUpdateProfileBuilder*) setNickname:(NSString*) value {
  resultUpdateProfile.hasNickname = YES;
  resultUpdateProfile.nickname = value;
  return self;
}
- (AppRequestUpdateProfileBuilder*) clearNickname {
  resultUpdateProfile.hasNickname = NO;
  resultUpdateProfile.nickname = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultUpdateProfile.hasPassword;
}
- (NSString*) password {
  return resultUpdateProfile.password;
}
- (AppRequestUpdateProfileBuilder*) setPassword:(NSString*) value {
  resultUpdateProfile.hasPassword = YES;
  resultUpdateProfile.password = value;
  return self;
}
- (AppRequestUpdateProfileBuilder*) clearPassword {
  resultUpdateProfile.hasPassword = NO;
  resultUpdateProfile.password = @"";
  return self;
}
- (BOOL) hasProfilePhoto {
  return resultUpdateProfile.hasProfilePhoto;
}
- (NSData*) profilePhoto {
  return resultUpdateProfile.profilePhoto;
}
- (AppRequestUpdateProfileBuilder*) setProfilePhoto:(NSData*) value {
  resultUpdateProfile.hasProfilePhoto = YES;
  resultUpdateProfile.profilePhoto = value;
  return self;
}
- (AppRequestUpdateProfileBuilder*) clearProfilePhoto {
  resultUpdateProfile.hasProfilePhoto = NO;
  resultUpdateProfile.profilePhoto = [NSData data];
  return self;
}
- (NSMutableArray *)personalAlbums {
  return resultUpdateProfile.personalAlbumsArray;
}
- (AppRequestPhotoAlbum*)personalAlbumsAtIndex:(NSUInteger)index {
  return [resultUpdateProfile personalAlbumsAtIndex:index];
}
- (AppRequestUpdateProfileBuilder *)addPersonalAlbums:(AppRequestPhotoAlbum*)value {
  if (resultUpdateProfile.personalAlbumsArray == nil) {
    resultUpdateProfile.personalAlbumsArray = [[NSMutableArray alloc]init];
  }
  [resultUpdateProfile.personalAlbumsArray addObject:value];
  return self;
}
- (AppRequestUpdateProfileBuilder *)setPersonalAlbumsArray:(NSArray *)array {
  resultUpdateProfile.personalAlbumsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AppRequestUpdateProfileBuilder *)clearPersonalAlbums {
  resultUpdateProfile.personalAlbumsArray = nil;
  return self;
}
@end

@interface AppRequestBuilder()
@property (strong) AppRequest* resultAppRequest;
@end

@implementation AppRequestBuilder
@synthesize resultAppRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppRequest = [[AppRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppRequest;
}
- (AppRequestBuilder*) clear {
  self.resultAppRequest = [[AppRequest alloc] init];
  return self;
}
- (AppRequestBuilder*) clone {
  return [AppRequest builderWithPrototype:resultAppRequest];
}
- (AppRequest*) defaultInstance {
  return [AppRequest defaultInstance];
}
- (AppRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppRequest*) buildPartial {
  AppRequest* returnMe = resultAppRequest;
  self.resultAppRequest = nil;
  return returnMe;
}
- (AppRequestBuilder*) mergeFrom:(AppRequest*) other {
  if (other == [AppRequest defaultInstance]) {
    return self;
  }
  if (other.hasPhoneId) {
    [self setPhoneId:other.phoneId];
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasRegMsg) {
    [self mergeRegMsg:other.regMsg];
  }
  if (other.hasLoginMsg) {
    [self mergeLoginMsg:other.loginMsg];
  }
  if (other.hasCreatePrivateEvent) {
    [self mergeCreatePrivateEvent:other.createPrivateEvent];
  }
  if (other.hasCreatePublicEvent) {
    [self mergeCreatePublicEvent:other.createPublicEvent];
  }
  if (other.hasAcceptEvent) {
    [self mergeAcceptEvent:other.acceptEvent];
  }
  if (other.hasPollParams) {
    [self mergePollParams:other.pollParams];
  }
  if (other.hasFriendRequest) {
    [self mergeFriendRequest:other.friendRequest];
  }
  if (other.hasAcceptFriendRequest) {
    [self mergeAcceptFriendRequest:other.acceptFriendRequest];
  }
  if (other.hasUpdateProfile) {
    [self mergeUpdateProfile:other.updateProfile];
  }
  if (other.requestUserInfoArray.count > 0) {
    if (resultAppRequest.requestUserInfoArray == nil) {
      resultAppRequest.requestUserInfoArray = [other.requestUserInfoArray copy];
    } else {
      [resultAppRequest.requestUserInfoArray appendArray:other.requestUserInfoArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPhoneId:[input readInt64]];
        break;
      }
      case 16: {
        AppRequestMessageType value = (AppRequestMessageType)[input readEnum];
        if (AppRequestMessageTypeIsValidValue(value)) {
          [self setMsgType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        AppRequestRegisterMessageBuilder* subBuilder = [AppRequestRegisterMessage builder];
        if (self.hasRegMsg) {
          [subBuilder mergeFrom:self.regMsg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRegMsg:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        AppRequestLoginMessageBuilder* subBuilder = [AppRequestLoginMessage builder];
        if (self.hasLoginMsg) {
          [subBuilder mergeFrom:self.loginMsg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginMsg:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        AppRequestCreatePrivateEventBuilder* subBuilder = [AppRequestCreatePrivateEvent builder];
        if (self.hasCreatePrivateEvent) {
          [subBuilder mergeFrom:self.createPrivateEvent];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreatePrivateEvent:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        AppRequestCreatePublicEventBuilder* subBuilder = [AppRequestCreatePublicEvent builder];
        if (self.hasCreatePublicEvent) {
          [subBuilder mergeFrom:self.createPublicEvent];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreatePublicEvent:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        AppRequestEventAcceptBuilder* subBuilder = [AppRequestEventAccept builder];
        if (self.hasAcceptEvent) {
          [subBuilder mergeFrom:self.acceptEvent];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAcceptEvent:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        AppRequestPollingParametersBuilder* subBuilder = [AppRequestPollingParameters builder];
        if (self.hasPollParams) {
          [subBuilder mergeFrom:self.pollParams];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPollParams:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        AppRequestFriendRequestBuilder* subBuilder = [AppRequestFriendRequest builder];
        if (self.hasFriendRequest) {
          [subBuilder mergeFrom:self.friendRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFriendRequest:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        AppRequestAcceptFriendRequestBuilder* subBuilder = [AppRequestAcceptFriendRequest builder];
        if (self.hasAcceptFriendRequest) {
          [subBuilder mergeFrom:self.acceptFriendRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAcceptFriendRequest:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        AppRequestUpdateProfileBuilder* subBuilder = [AppRequestUpdateProfile builder];
        if (self.hasUpdateProfile) {
          [subBuilder mergeFrom:self.updateProfile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUpdateProfile:[subBuilder buildPartial]];
        break;
      }
      case 112: {
        [self addRequestUserInfo:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPhoneId {
  return resultAppRequest.hasPhoneId;
}
- (SInt64) phoneId {
  return resultAppRequest.phoneId;
}
- (AppRequestBuilder*) setPhoneId:(SInt64) value {
  resultAppRequest.hasPhoneId = YES;
  resultAppRequest.phoneId = value;
  return self;
}
- (AppRequestBuilder*) clearPhoneId {
  resultAppRequest.hasPhoneId = NO;
  resultAppRequest.phoneId = 0L;
  return self;
}
- (BOOL) hasMsgType {
  return resultAppRequest.hasMsgType;
}
- (AppRequestMessageType) msgType {
  return resultAppRequest.msgType;
}
- (AppRequestBuilder*) setMsgType:(AppRequestMessageType) value {
  resultAppRequest.hasMsgType = YES;
  resultAppRequest.msgType = value;
  return self;
}
- (AppRequestBuilder*) clearMsgType {
  resultAppRequest.hasMsgType = NO;
  resultAppRequest.msgType = AppRequestMessageTypeTFriendRequest;
  return self;
}
- (BOOL) hasRegMsg {
  return resultAppRequest.hasRegMsg;
}
- (AppRequestRegisterMessage*) regMsg {
  return resultAppRequest.regMsg;
}
- (AppRequestBuilder*) setRegMsg:(AppRequestRegisterMessage*) value {
  resultAppRequest.hasRegMsg = YES;
  resultAppRequest.regMsg = value;
  return self;
}
- (AppRequestBuilder*) setRegMsgBuilder:(AppRequestRegisterMessageBuilder*) builderForValue {
  return [self setRegMsg:[builderForValue build]];
}
- (AppRequestBuilder*) mergeRegMsg:(AppRequestRegisterMessage*) value {
  if (resultAppRequest.hasRegMsg &&
      resultAppRequest.regMsg != [AppRequestRegisterMessage defaultInstance]) {
    resultAppRequest.regMsg =
      [[[AppRequestRegisterMessage builderWithPrototype:resultAppRequest.regMsg] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.regMsg = value;
  }
  resultAppRequest.hasRegMsg = YES;
  return self;
}
- (AppRequestBuilder*) clearRegMsg {
  resultAppRequest.hasRegMsg = NO;
  resultAppRequest.regMsg = [AppRequestRegisterMessage defaultInstance];
  return self;
}
- (BOOL) hasLoginMsg {
  return resultAppRequest.hasLoginMsg;
}
- (AppRequestLoginMessage*) loginMsg {
  return resultAppRequest.loginMsg;
}
- (AppRequestBuilder*) setLoginMsg:(AppRequestLoginMessage*) value {
  resultAppRequest.hasLoginMsg = YES;
  resultAppRequest.loginMsg = value;
  return self;
}
- (AppRequestBuilder*) setLoginMsgBuilder:(AppRequestLoginMessageBuilder*) builderForValue {
  return [self setLoginMsg:[builderForValue build]];
}
- (AppRequestBuilder*) mergeLoginMsg:(AppRequestLoginMessage*) value {
  if (resultAppRequest.hasLoginMsg &&
      resultAppRequest.loginMsg != [AppRequestLoginMessage defaultInstance]) {
    resultAppRequest.loginMsg =
      [[[AppRequestLoginMessage builderWithPrototype:resultAppRequest.loginMsg] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.loginMsg = value;
  }
  resultAppRequest.hasLoginMsg = YES;
  return self;
}
- (AppRequestBuilder*) clearLoginMsg {
  resultAppRequest.hasLoginMsg = NO;
  resultAppRequest.loginMsg = [AppRequestLoginMessage defaultInstance];
  return self;
}
- (BOOL) hasCreatePrivateEvent {
  return resultAppRequest.hasCreatePrivateEvent;
}
- (AppRequestCreatePrivateEvent*) createPrivateEvent {
  return resultAppRequest.createPrivateEvent;
}
- (AppRequestBuilder*) setCreatePrivateEvent:(AppRequestCreatePrivateEvent*) value {
  resultAppRequest.hasCreatePrivateEvent = YES;
  resultAppRequest.createPrivateEvent = value;
  return self;
}
- (AppRequestBuilder*) setCreatePrivateEventBuilder:(AppRequestCreatePrivateEventBuilder*) builderForValue {
  return [self setCreatePrivateEvent:[builderForValue build]];
}
- (AppRequestBuilder*) mergeCreatePrivateEvent:(AppRequestCreatePrivateEvent*) value {
  if (resultAppRequest.hasCreatePrivateEvent &&
      resultAppRequest.createPrivateEvent != [AppRequestCreatePrivateEvent defaultInstance]) {
    resultAppRequest.createPrivateEvent =
      [[[AppRequestCreatePrivateEvent builderWithPrototype:resultAppRequest.createPrivateEvent] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.createPrivateEvent = value;
  }
  resultAppRequest.hasCreatePrivateEvent = YES;
  return self;
}
- (AppRequestBuilder*) clearCreatePrivateEvent {
  resultAppRequest.hasCreatePrivateEvent = NO;
  resultAppRequest.createPrivateEvent = [AppRequestCreatePrivateEvent defaultInstance];
  return self;
}
- (BOOL) hasCreatePublicEvent {
  return resultAppRequest.hasCreatePublicEvent;
}
- (AppRequestCreatePublicEvent*) createPublicEvent {
  return resultAppRequest.createPublicEvent;
}
- (AppRequestBuilder*) setCreatePublicEvent:(AppRequestCreatePublicEvent*) value {
  resultAppRequest.hasCreatePublicEvent = YES;
  resultAppRequest.createPublicEvent = value;
  return self;
}
- (AppRequestBuilder*) setCreatePublicEventBuilder:(AppRequestCreatePublicEventBuilder*) builderForValue {
  return [self setCreatePublicEvent:[builderForValue build]];
}
- (AppRequestBuilder*) mergeCreatePublicEvent:(AppRequestCreatePublicEvent*) value {
  if (resultAppRequest.hasCreatePublicEvent &&
      resultAppRequest.createPublicEvent != [AppRequestCreatePublicEvent defaultInstance]) {
    resultAppRequest.createPublicEvent =
      [[[AppRequestCreatePublicEvent builderWithPrototype:resultAppRequest.createPublicEvent] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.createPublicEvent = value;
  }
  resultAppRequest.hasCreatePublicEvent = YES;
  return self;
}
- (AppRequestBuilder*) clearCreatePublicEvent {
  resultAppRequest.hasCreatePublicEvent = NO;
  resultAppRequest.createPublicEvent = [AppRequestCreatePublicEvent defaultInstance];
  return self;
}
- (BOOL) hasAcceptEvent {
  return resultAppRequest.hasAcceptEvent;
}
- (AppRequestEventAccept*) acceptEvent {
  return resultAppRequest.acceptEvent;
}
- (AppRequestBuilder*) setAcceptEvent:(AppRequestEventAccept*) value {
  resultAppRequest.hasAcceptEvent = YES;
  resultAppRequest.acceptEvent = value;
  return self;
}
- (AppRequestBuilder*) setAcceptEventBuilder:(AppRequestEventAcceptBuilder*) builderForValue {
  return [self setAcceptEvent:[builderForValue build]];
}
- (AppRequestBuilder*) mergeAcceptEvent:(AppRequestEventAccept*) value {
  if (resultAppRequest.hasAcceptEvent &&
      resultAppRequest.acceptEvent != [AppRequestEventAccept defaultInstance]) {
    resultAppRequest.acceptEvent =
      [[[AppRequestEventAccept builderWithPrototype:resultAppRequest.acceptEvent] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.acceptEvent = value;
  }
  resultAppRequest.hasAcceptEvent = YES;
  return self;
}
- (AppRequestBuilder*) clearAcceptEvent {
  resultAppRequest.hasAcceptEvent = NO;
  resultAppRequest.acceptEvent = [AppRequestEventAccept defaultInstance];
  return self;
}
- (BOOL) hasPollParams {
  return resultAppRequest.hasPollParams;
}
- (AppRequestPollingParameters*) pollParams {
  return resultAppRequest.pollParams;
}
- (AppRequestBuilder*) setPollParams:(AppRequestPollingParameters*) value {
  resultAppRequest.hasPollParams = YES;
  resultAppRequest.pollParams = value;
  return self;
}
- (AppRequestBuilder*) setPollParamsBuilder:(AppRequestPollingParametersBuilder*) builderForValue {
  return [self setPollParams:[builderForValue build]];
}
- (AppRequestBuilder*) mergePollParams:(AppRequestPollingParameters*) value {
  if (resultAppRequest.hasPollParams &&
      resultAppRequest.pollParams != [AppRequestPollingParameters defaultInstance]) {
    resultAppRequest.pollParams =
      [[[AppRequestPollingParameters builderWithPrototype:resultAppRequest.pollParams] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.pollParams = value;
  }
  resultAppRequest.hasPollParams = YES;
  return self;
}
- (AppRequestBuilder*) clearPollParams {
  resultAppRequest.hasPollParams = NO;
  resultAppRequest.pollParams = [AppRequestPollingParameters defaultInstance];
  return self;
}
- (BOOL) hasFriendRequest {
  return resultAppRequest.hasFriendRequest;
}
- (AppRequestFriendRequest*) friendRequest {
  return resultAppRequest.friendRequest;
}
- (AppRequestBuilder*) setFriendRequest:(AppRequestFriendRequest*) value {
  resultAppRequest.hasFriendRequest = YES;
  resultAppRequest.friendRequest = value;
  return self;
}
- (AppRequestBuilder*) setFriendRequestBuilder:(AppRequestFriendRequestBuilder*) builderForValue {
  return [self setFriendRequest:[builderForValue build]];
}
- (AppRequestBuilder*) mergeFriendRequest:(AppRequestFriendRequest*) value {
  if (resultAppRequest.hasFriendRequest &&
      resultAppRequest.friendRequest != [AppRequestFriendRequest defaultInstance]) {
    resultAppRequest.friendRequest =
      [[[AppRequestFriendRequest builderWithPrototype:resultAppRequest.friendRequest] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.friendRequest = value;
  }
  resultAppRequest.hasFriendRequest = YES;
  return self;
}
- (AppRequestBuilder*) clearFriendRequest {
  resultAppRequest.hasFriendRequest = NO;
  resultAppRequest.friendRequest = [AppRequestFriendRequest defaultInstance];
  return self;
}
- (BOOL) hasAcceptFriendRequest {
  return resultAppRequest.hasAcceptFriendRequest;
}
- (AppRequestAcceptFriendRequest*) acceptFriendRequest {
  return resultAppRequest.acceptFriendRequest;
}
- (AppRequestBuilder*) setAcceptFriendRequest:(AppRequestAcceptFriendRequest*) value {
  resultAppRequest.hasAcceptFriendRequest = YES;
  resultAppRequest.acceptFriendRequest = value;
  return self;
}
- (AppRequestBuilder*) setAcceptFriendRequestBuilder:(AppRequestAcceptFriendRequestBuilder*) builderForValue {
  return [self setAcceptFriendRequest:[builderForValue build]];
}
- (AppRequestBuilder*) mergeAcceptFriendRequest:(AppRequestAcceptFriendRequest*) value {
  if (resultAppRequest.hasAcceptFriendRequest &&
      resultAppRequest.acceptFriendRequest != [AppRequestAcceptFriendRequest defaultInstance]) {
    resultAppRequest.acceptFriendRequest =
      [[[AppRequestAcceptFriendRequest builderWithPrototype:resultAppRequest.acceptFriendRequest] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.acceptFriendRequest = value;
  }
  resultAppRequest.hasAcceptFriendRequest = YES;
  return self;
}
- (AppRequestBuilder*) clearAcceptFriendRequest {
  resultAppRequest.hasAcceptFriendRequest = NO;
  resultAppRequest.acceptFriendRequest = [AppRequestAcceptFriendRequest defaultInstance];
  return self;
}
- (BOOL) hasUpdateProfile {
  return resultAppRequest.hasUpdateProfile;
}
- (AppRequestUpdateProfile*) updateProfile {
  return resultAppRequest.updateProfile;
}
- (AppRequestBuilder*) setUpdateProfile:(AppRequestUpdateProfile*) value {
  resultAppRequest.hasUpdateProfile = YES;
  resultAppRequest.updateProfile = value;
  return self;
}
- (AppRequestBuilder*) setUpdateProfileBuilder:(AppRequestUpdateProfileBuilder*) builderForValue {
  return [self setUpdateProfile:[builderForValue build]];
}
- (AppRequestBuilder*) mergeUpdateProfile:(AppRequestUpdateProfile*) value {
  if (resultAppRequest.hasUpdateProfile &&
      resultAppRequest.updateProfile != [AppRequestUpdateProfile defaultInstance]) {
    resultAppRequest.updateProfile =
      [[[AppRequestUpdateProfile builderWithPrototype:resultAppRequest.updateProfile] mergeFrom:value] buildPartial];
  } else {
    resultAppRequest.updateProfile = value;
  }
  resultAppRequest.hasUpdateProfile = YES;
  return self;
}
- (AppRequestBuilder*) clearUpdateProfile {
  resultAppRequest.hasUpdateProfile = NO;
  resultAppRequest.updateProfile = [AppRequestUpdateProfile defaultInstance];
  return self;
}
- (PBAppendableArray *)requestUserInfo {
  return resultAppRequest.requestUserInfoArray;
}
- (SInt64)requestUserInfoAtIndex:(NSUInteger)index {
  return [resultAppRequest requestUserInfoAtIndex:index];
}
- (AppRequestBuilder *)addRequestUserInfo:(SInt64)value {
  if (resultAppRequest.requestUserInfoArray == nil) {
    resultAppRequest.requestUserInfoArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultAppRequest.requestUserInfoArray addInt64:value];
  return self;
}
- (AppRequestBuilder *)setRequestUserInfoArray:(NSArray *)array {
  resultAppRequest.requestUserInfoArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppRequestBuilder *)setRequestUserInfoValues:(const SInt64 *)values count:(NSUInteger)count {
  resultAppRequest.requestUserInfoArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppRequestBuilder *)clearRequestUserInfo {
  resultAppRequest.requestUserInfoArray = nil;
  return self;
}
@end

@interface AppReply ()
@property AppReplyResponseType responseType;
@property (strong) AppReplyEventUUID* eventUuid;
@property (strong) NSMutableArray * usersArray;
@property (strong) NSMutableArray * friendRequestsArray;
@property (strong) NSMutableArray * eventInfoArray;
@property (strong) PBAppendableArray * acceptedFriendsArray;
@end

@implementation AppReply

- (BOOL) hasResponseType {
  return !!hasResponseType_;
}
- (void) setHasResponseType:(BOOL) _value_ {
  hasResponseType_ = !!_value_;
}
@synthesize responseType;
- (BOOL) hasEventUuid {
  return !!hasEventUuid_;
}
- (void) setHasEventUuid:(BOOL) _value_ {
  hasEventUuid_ = !!_value_;
}
@synthesize eventUuid;
@synthesize usersArray;
@dynamic users;
@synthesize friendRequestsArray;
@dynamic friendRequests;
@synthesize eventInfoArray;
@dynamic eventInfo;
@synthesize acceptedFriendsArray;
@dynamic acceptedFriends;
- (instancetype) init {
  if ((self = [super init])) {
    self.responseType = AppReplyResponseTypeTSuccess;
    self.eventUuid = [AppReplyEventUUID defaultInstance];
  }
  return self;
}
static AppReply* defaultAppReplyInstance = nil;
+ (void) initialize {
  if (self == [AppReply class]) {
    defaultAppReplyInstance = [[AppReply alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppReplyInstance;
}
- (instancetype) defaultInstance {
  return defaultAppReplyInstance;
}
- (NSArray *)users {
  return usersArray;
}
- (AppReplyUser*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (NSArray *)friendRequests {
  return friendRequestsArray;
}
- (AppReplyFriendRequest*)friendRequestsAtIndex:(NSUInteger)index {
  return [friendRequestsArray objectAtIndex:index];
}
- (NSArray *)eventInfo {
  return eventInfoArray;
}
- (AppReplyEventInfo*)eventInfoAtIndex:(NSUInteger)index {
  return [eventInfoArray objectAtIndex:index];
}
- (PBArray *)acceptedFriends {
  return acceptedFriendsArray;
}
- (SInt64)acceptedFriendsAtIndex:(NSUInteger)index {
  return [acceptedFriendsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasResponseType) {
    return NO;
  }
  if (self.hasEventUuid) {
    if (!self.eventUuid.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitusers = YES;
   [self.users enumerateObjectsUsingBlock:^(AppReplyUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusers = NO;
      *stop = YES;
    }
  }];
  if (!isInitusers) return isInitusers;
  __block BOOL isInitfriendRequests = YES;
   [self.friendRequests enumerateObjectsUsingBlock:^(AppReplyFriendRequest *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfriendRequests = NO;
      *stop = YES;
    }
  }];
  if (!isInitfriendRequests) return isInitfriendRequests;
  __block BOOL isIniteventInfo = YES;
   [self.eventInfo enumerateObjectsUsingBlock:^(AppReplyEventInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isIniteventInfo = NO;
      *stop = YES;
    }
  }];
  if (!isIniteventInfo) return isIniteventInfo;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResponseType) {
    [output writeEnum:1 value:self.responseType];
  }
  if (self.hasEventUuid) {
    [output writeMessage:2 value:self.eventUuid];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(AppReplyUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.friendRequestsArray enumerateObjectsUsingBlock:^(AppReplyFriendRequest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.eventInfoArray enumerateObjectsUsingBlock:^(AppReplyEventInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  const NSUInteger acceptedFriendsArrayCount = self.acceptedFriendsArray.count;
  if (acceptedFriendsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.acceptedFriendsArray.data;
    for (NSUInteger i = 0; i < acceptedFriendsArrayCount; ++i) {
      [output writeInt64:6 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResponseType) {
    size_ += computeEnumSize(1, self.responseType);
  }
  if (self.hasEventUuid) {
    size_ += computeMessageSize(2, self.eventUuid);
  }
  [self.usersArray enumerateObjectsUsingBlock:^(AppReplyUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  [self.friendRequestsArray enumerateObjectsUsingBlock:^(AppReplyFriendRequest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.eventInfoArray enumerateObjectsUsingBlock:^(AppReplyEventInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.acceptedFriendsArray.count;
    const SInt64 *values = (const SInt64 *)self.acceptedFriendsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppReply*) parseFromData:(NSData*) data {
  return (AppReply*)[[[AppReply builder] mergeFromData:data] build];
}
+ (AppReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReply*)[[[AppReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppReply*) parseFromInputStream:(NSInputStream*) input {
  return (AppReply*)[[[AppReply builder] mergeFromInputStream:input] build];
}
+ (AppReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReply*)[[[AppReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppReply*)[[[AppReply builder] mergeFromCodedInputStream:input] build];
}
+ (AppReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReply*)[[[AppReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyBuilder*) builder {
  return [[AppReplyBuilder alloc] init];
}
+ (AppReplyBuilder*) builderWithPrototype:(AppReply*) prototype {
  return [[AppReply builder] mergeFrom:prototype];
}
- (AppReplyBuilder*) builder {
  return [AppReply builder];
}
- (AppReplyBuilder*) toBuilder {
  return [AppReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResponseType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseType", NSStringFromAppReplyResponseType(self.responseType)];
  }
  if (self.hasEventUuid) {
    [output appendFormat:@"%@%@ {\n", indent, @"eventUuid"];
    [self.eventUuid writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(AppReplyUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.friendRequestsArray enumerateObjectsUsingBlock:^(AppReplyFriendRequest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"friendRequests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.eventInfoArray enumerateObjectsUsingBlock:^(AppReplyEventInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"eventInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.acceptedFriendsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acceptedFriends", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResponseType) {
    [dictionary setObject: @(self.responseType) forKey: @"responseType"];
  }
  if (self.hasEventUuid) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.eventUuid storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"eventUuid"];
  }
  for (AppReplyUser* element in self.usersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"users"];
  }
  for (AppReplyFriendRequest* element in self.friendRequestsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"friendRequests"];
  }
  for (AppReplyEventInfo* element in self.eventInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"eventInfo"];
  }
  NSMutableArray * acceptedFriendsArrayArray = [NSMutableArray new];
  NSUInteger acceptedFriendsArrayCount=self.acceptedFriendsArray.count;
  for(int i=0;i<acceptedFriendsArrayCount;i++){
    [acceptedFriendsArrayArray addObject: @([self.acceptedFriendsArray int64AtIndex:i])];
  }
  [dictionary setObject: acceptedFriendsArrayArray forKey: @"acceptedFriends"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppReply class]]) {
    return NO;
  }
  AppReply *otherMessage = other;
  return
      self.hasResponseType == otherMessage.hasResponseType &&
      (!self.hasResponseType || self.responseType == otherMessage.responseType) &&
      self.hasEventUuid == otherMessage.hasEventUuid &&
      (!self.hasEventUuid || [self.eventUuid isEqual:otherMessage.eventUuid]) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.friendRequestsArray isEqualToArray:otherMessage.friendRequestsArray] &&
      [self.eventInfoArray isEqualToArray:otherMessage.eventInfoArray] &&
      [self.acceptedFriendsArray isEqualToArray:otherMessage.acceptedFriendsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResponseType) {
    hashCode = hashCode * 31 + self.responseType;
  }
  if (self.hasEventUuid) {
    hashCode = hashCode * 31 + [self.eventUuid hash];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(AppReplyUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.friendRequestsArray enumerateObjectsUsingBlock:^(AppReplyFriendRequest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.eventInfoArray enumerateObjectsUsingBlock:^(AppReplyEventInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.acceptedFriendsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL AppReplyResponseTypeIsValidValue(AppReplyResponseType value) {
  switch (value) {
    case AppReplyResponseTypeTSuccess:
    case AppReplyResponseTypeTMissingInput:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromAppReplyResponseType(AppReplyResponseType value) {
  switch (value) {
    case AppReplyResponseTypeTSuccess:
      return @"AppReplyResponseTypeTSuccess";
    case AppReplyResponseTypeTMissingInput:
      return @"AppReplyResponseTypeTMissingInput";
    default:
      return nil;
  }
}

@interface AppReplyEventUUID ()
@property (strong) NSData* eventUuid1;
@end

@implementation AppReplyEventUUID

- (BOOL) hasEventUuid1 {
  return !!hasEventUuid1_;
}
- (void) setHasEventUuid1:(BOOL) _value_ {
  hasEventUuid1_ = !!_value_;
}
@synthesize eventUuid1;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventUuid1 = [NSData data];
  }
  return self;
}
static AppReplyEventUUID* defaultAppReplyEventUUIDInstance = nil;
+ (void) initialize {
  if (self == [AppReplyEventUUID class]) {
    defaultAppReplyEventUUIDInstance = [[AppReplyEventUUID alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppReplyEventUUIDInstance;
}
- (instancetype) defaultInstance {
  return defaultAppReplyEventUUIDInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventUuid1) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventUuid1) {
    [output writeData:1 value:self.eventUuid1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventUuid1) {
    size_ += computeDataSize(1, self.eventUuid1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppReplyEventUUID*) parseFromData:(NSData*) data {
  return (AppReplyEventUUID*)[[[AppReplyEventUUID builder] mergeFromData:data] build];
}
+ (AppReplyEventUUID*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyEventUUID*)[[[AppReplyEventUUID builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppReplyEventUUID*) parseFromInputStream:(NSInputStream*) input {
  return (AppReplyEventUUID*)[[[AppReplyEventUUID builder] mergeFromInputStream:input] build];
}
+ (AppReplyEventUUID*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyEventUUID*)[[[AppReplyEventUUID builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyEventUUID*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppReplyEventUUID*)[[[AppReplyEventUUID builder] mergeFromCodedInputStream:input] build];
}
+ (AppReplyEventUUID*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyEventUUID*)[[[AppReplyEventUUID builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyEventUUIDBuilder*) builder {
  return [[AppReplyEventUUIDBuilder alloc] init];
}
+ (AppReplyEventUUIDBuilder*) builderWithPrototype:(AppReplyEventUUID*) prototype {
  return [[AppReplyEventUUID builder] mergeFrom:prototype];
}
- (AppReplyEventUUIDBuilder*) builder {
  return [AppReplyEventUUID builder];
}
- (AppReplyEventUUIDBuilder*) toBuilder {
  return [AppReplyEventUUID builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventUuid1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventUuid1", self.eventUuid1];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventUuid1) {
    [dictionary setObject: self.eventUuid1 forKey: @"eventUuid1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppReplyEventUUID class]]) {
    return NO;
  }
  AppReplyEventUUID *otherMessage = other;
  return
      self.hasEventUuid1 == otherMessage.hasEventUuid1 &&
      (!self.hasEventUuid1 || [self.eventUuid1 isEqual:otherMessage.eventUuid1]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventUuid1) {
    hashCode = hashCode * 31 + [self.eventUuid1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppReplyEventUUIDBuilder()
@property (strong) AppReplyEventUUID* resultEventUuid;
@end

@implementation AppReplyEventUUIDBuilder
@synthesize resultEventUuid;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEventUuid = [[AppReplyEventUUID alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEventUuid;
}
- (AppReplyEventUUIDBuilder*) clear {
  self.resultEventUuid = [[AppReplyEventUUID alloc] init];
  return self;
}
- (AppReplyEventUUIDBuilder*) clone {
  return [AppReplyEventUUID builderWithPrototype:resultEventUuid];
}
- (AppReplyEventUUID*) defaultInstance {
  return [AppReplyEventUUID defaultInstance];
}
- (AppReplyEventUUID*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppReplyEventUUID*) buildPartial {
  AppReplyEventUUID* returnMe = resultEventUuid;
  self.resultEventUuid = nil;
  return returnMe;
}
- (AppReplyEventUUIDBuilder*) mergeFrom:(AppReplyEventUUID*) other {
  if (other == [AppReplyEventUUID defaultInstance]) {
    return self;
  }
  if (other.hasEventUuid1) {
    [self setEventUuid1:other.eventUuid1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppReplyEventUUIDBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppReplyEventUUIDBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventUuid1:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasEventUuid1 {
  return resultEventUuid.hasEventUuid1;
}
- (NSData*) eventUuid1 {
  return resultEventUuid.eventUuid1;
}
- (AppReplyEventUUIDBuilder*) setEventUuid1:(NSData*) value {
  resultEventUuid.hasEventUuid1 = YES;
  resultEventUuid.eventUuid1 = value;
  return self;
}
- (AppReplyEventUUIDBuilder*) clearEventUuid1 {
  resultEventUuid.hasEventUuid1 = NO;
  resultEventUuid.eventUuid1 = [NSData data];
  return self;
}
@end

@interface AppReplyUser ()
@property SInt64 phoneNumber;
@property (strong) NSString* nickname;
@property BOOL isMale;
@property (strong) NSData* profilePhoto;
@property (strong) NSString* email;
@property (strong) NSString* pb_description;
@property (strong) NSString* location;
@end

@implementation AppReplyUser

- (BOOL) hasPhoneNumber {
  return !!hasPhoneNumber_;
}
- (void) setHasPhoneNumber:(BOOL) _value_ {
  hasPhoneNumber_ = !!_value_;
}
@synthesize phoneNumber;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) _value_ {
  hasNickname_ = !!_value_;
}
@synthesize nickname;
- (BOOL) hasIsMale {
  return !!hasIsMale_;
}
- (void) setHasIsMale:(BOOL) _value_ {
  hasIsMale_ = !!_value_;
}
- (BOOL) isMale {
  return !!isMale_;
}
- (void) setIsMale:(BOOL) _value_ {
  isMale_ = !!_value_;
}
- (BOOL) hasProfilePhoto {
  return !!hasProfilePhoto_;
}
- (void) setHasProfilePhoto:(BOOL) _value_ {
  hasProfilePhoto_ = !!_value_;
}
@synthesize profilePhoto;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (instancetype) init {
  if ((self = [super init])) {
    self.phoneNumber = 0L;
    self.nickname = @"";
    self.isMale = NO;
    self.profilePhoto = [NSData data];
    self.email = @"";
    self.pb_description = @"";
    self.location = @"";
  }
  return self;
}
static AppReplyUser* defaultAppReplyUserInstance = nil;
+ (void) initialize {
  if (self == [AppReplyUser class]) {
    defaultAppReplyUserInstance = [[AppReplyUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppReplyUserInstance;
}
- (instancetype) defaultInstance {
  return defaultAppReplyUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPhoneNumber) {
    return NO;
  }
  if (!self.hasIsMale) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoneNumber) {
    [output writeInt64:1 value:self.phoneNumber];
  }
  if (self.hasNickname) {
    [output writeString:2 value:self.nickname];
  }
  if (self.hasIsMale) {
    [output writeBool:3 value:self.isMale];
  }
  if (self.hasProfilePhoto) {
    [output writeData:4 value:self.profilePhoto];
  }
  if (self.hasEmail) {
    [output writeString:5 value:self.email];
  }
  if (self.hasDescription) {
    [output writeString:6 value:self.pb_description];
  }
  if (self.hasLocation) {
    [output writeString:7 value:self.location];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoneNumber) {
    size_ += computeInt64Size(1, self.phoneNumber);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(2, self.nickname);
  }
  if (self.hasIsMale) {
    size_ += computeBoolSize(3, self.isMale);
  }
  if (self.hasProfilePhoto) {
    size_ += computeDataSize(4, self.profilePhoto);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(5, self.email);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(6, self.pb_description);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(7, self.location);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppReplyUser*) parseFromData:(NSData*) data {
  return (AppReplyUser*)[[[AppReplyUser builder] mergeFromData:data] build];
}
+ (AppReplyUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyUser*)[[[AppReplyUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppReplyUser*) parseFromInputStream:(NSInputStream*) input {
  return (AppReplyUser*)[[[AppReplyUser builder] mergeFromInputStream:input] build];
}
+ (AppReplyUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyUser*)[[[AppReplyUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppReplyUser*)[[[AppReplyUser builder] mergeFromCodedInputStream:input] build];
}
+ (AppReplyUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyUser*)[[[AppReplyUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyUserBuilder*) builder {
  return [[AppReplyUserBuilder alloc] init];
}
+ (AppReplyUserBuilder*) builderWithPrototype:(AppReplyUser*) prototype {
  return [[AppReplyUser builder] mergeFrom:prototype];
}
- (AppReplyUserBuilder*) builder {
  return [AppReplyUser builder];
}
- (AppReplyUserBuilder*) toBuilder {
  return [AppReplyUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoneNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNumber", [NSNumber numberWithLongLong:self.phoneNumber]];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  if (self.hasIsMale) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isMale", [NSNumber numberWithBool:self.isMale]];
  }
  if (self.hasProfilePhoto) {
    [output appendFormat:@"%@%@: %@\n", indent, @"profilePhoto", self.profilePhoto];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoneNumber) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.phoneNumber] forKey: @"phoneNumber"];
  }
  if (self.hasNickname) {
    [dictionary setObject: self.nickname forKey: @"nickname"];
  }
  if (self.hasIsMale) {
    [dictionary setObject: [NSNumber numberWithBool:self.isMale] forKey: @"isMale"];
  }
  if (self.hasProfilePhoto) {
    [dictionary setObject: self.profilePhoto forKey: @"profilePhoto"];
  }
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppReplyUser class]]) {
    return NO;
  }
  AppReplyUser *otherMessage = other;
  return
      self.hasPhoneNumber == otherMessage.hasPhoneNumber &&
      (!self.hasPhoneNumber || self.phoneNumber == otherMessage.phoneNumber) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      self.hasIsMale == otherMessage.hasIsMale &&
      (!self.hasIsMale || self.isMale == otherMessage.isMale) &&
      self.hasProfilePhoto == otherMessage.hasProfilePhoto &&
      (!self.hasProfilePhoto || [self.profilePhoto isEqual:otherMessage.profilePhoto]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoneNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.phoneNumber] hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  if (self.hasIsMale) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isMale] hash];
  }
  if (self.hasProfilePhoto) {
    hashCode = hashCode * 31 + [self.profilePhoto hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppReplyUserBuilder()
@property (strong) AppReplyUser* resultUser;
@end

@implementation AppReplyUserBuilder
@synthesize resultUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUser = [[AppReplyUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUser;
}
- (AppReplyUserBuilder*) clear {
  self.resultUser = [[AppReplyUser alloc] init];
  return self;
}
- (AppReplyUserBuilder*) clone {
  return [AppReplyUser builderWithPrototype:resultUser];
}
- (AppReplyUser*) defaultInstance {
  return [AppReplyUser defaultInstance];
}
- (AppReplyUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppReplyUser*) buildPartial {
  AppReplyUser* returnMe = resultUser;
  self.resultUser = nil;
  return returnMe;
}
- (AppReplyUserBuilder*) mergeFrom:(AppReplyUser*) other {
  if (other == [AppReplyUser defaultInstance]) {
    return self;
  }
  if (other.hasPhoneNumber) {
    [self setPhoneNumber:other.phoneNumber];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  if (other.hasIsMale) {
    [self setIsMale:other.isMale];
  }
  if (other.hasProfilePhoto) {
    [self setProfilePhoto:other.profilePhoto];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppReplyUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppReplyUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPhoneNumber:[input readInt64]];
        break;
      }
      case 18: {
        [self setNickname:[input readString]];
        break;
      }
      case 24: {
        [self setIsMale:[input readBool]];
        break;
      }
      case 34: {
        [self setProfilePhoto:[input readData]];
        break;
      }
      case 42: {
        [self setEmail:[input readString]];
        break;
      }
      case 50: {
        [self setDescription:[input readString]];
        break;
      }
      case 58: {
        [self setLocation:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPhoneNumber {
  return resultUser.hasPhoneNumber;
}
- (SInt64) phoneNumber {
  return resultUser.phoneNumber;
}
- (AppReplyUserBuilder*) setPhoneNumber:(SInt64) value {
  resultUser.hasPhoneNumber = YES;
  resultUser.phoneNumber = value;
  return self;
}
- (AppReplyUserBuilder*) clearPhoneNumber {
  resultUser.hasPhoneNumber = NO;
  resultUser.phoneNumber = 0L;
  return self;
}
- (BOOL) hasNickname {
  return resultUser.hasNickname;
}
- (NSString*) nickname {
  return resultUser.nickname;
}
- (AppReplyUserBuilder*) setNickname:(NSString*) value {
  resultUser.hasNickname = YES;
  resultUser.nickname = value;
  return self;
}
- (AppReplyUserBuilder*) clearNickname {
  resultUser.hasNickname = NO;
  resultUser.nickname = @"";
  return self;
}
- (BOOL) hasIsMale {
  return resultUser.hasIsMale;
}
- (BOOL) isMale {
  return resultUser.isMale;
}
- (AppReplyUserBuilder*) setIsMale:(BOOL) value {
  resultUser.hasIsMale = YES;
  resultUser.isMale = value;
  return self;
}
- (AppReplyUserBuilder*) clearIsMale {
  resultUser.hasIsMale = NO;
  resultUser.isMale = NO;
  return self;
}
- (BOOL) hasProfilePhoto {
  return resultUser.hasProfilePhoto;
}
- (NSData*) profilePhoto {
  return resultUser.profilePhoto;
}
- (AppReplyUserBuilder*) setProfilePhoto:(NSData*) value {
  resultUser.hasProfilePhoto = YES;
  resultUser.profilePhoto = value;
  return self;
}
- (AppReplyUserBuilder*) clearProfilePhoto {
  resultUser.hasProfilePhoto = NO;
  resultUser.profilePhoto = [NSData data];
  return self;
}
- (BOOL) hasEmail {
  return resultUser.hasEmail;
}
- (NSString*) email {
  return resultUser.email;
}
- (AppReplyUserBuilder*) setEmail:(NSString*) value {
  resultUser.hasEmail = YES;
  resultUser.email = value;
  return self;
}
- (AppReplyUserBuilder*) clearEmail {
  resultUser.hasEmail = NO;
  resultUser.email = @"";
  return self;
}
- (BOOL) hasDescription {
  return resultUser.hasDescription;
}
- (NSString*) pb_description {
  return resultUser.pb_description;
}
- (AppReplyUserBuilder*) setDescription:(NSString*) value {
  resultUser.hasDescription = YES;
  resultUser.pb_description = value;
  return self;
}
- (AppReplyUserBuilder*) clearDescription {
  resultUser.hasDescription = NO;
  resultUser.pb_description = @"";
  return self;
}
- (BOOL) hasLocation {
  return resultUser.hasLocation;
}
- (NSString*) location {
  return resultUser.location;
}
- (AppReplyUserBuilder*) setLocation:(NSString*) value {
  resultUser.hasLocation = YES;
  resultUser.location = value;
  return self;
}
- (AppReplyUserBuilder*) clearLocation {
  resultUser.hasLocation = NO;
  resultUser.location = @"";
  return self;
}
@end

@interface AppReplyFriendRequest ()
@property SInt64 requestOriginUserId;
@property (strong) NSString* requestMessage;
@end

@implementation AppReplyFriendRequest

- (BOOL) hasRequestOriginUserId {
  return !!hasRequestOriginUserId_;
}
- (void) setHasRequestOriginUserId:(BOOL) _value_ {
  hasRequestOriginUserId_ = !!_value_;
}
@synthesize requestOriginUserId;
- (BOOL) hasRequestMessage {
  return !!hasRequestMessage_;
}
- (void) setHasRequestMessage:(BOOL) _value_ {
  hasRequestMessage_ = !!_value_;
}
@synthesize requestMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestOriginUserId = 0L;
    self.requestMessage = @"";
  }
  return self;
}
static AppReplyFriendRequest* defaultAppReplyFriendRequestInstance = nil;
+ (void) initialize {
  if (self == [AppReplyFriendRequest class]) {
    defaultAppReplyFriendRequestInstance = [[AppReplyFriendRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppReplyFriendRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultAppReplyFriendRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRequestOriginUserId) {
    return NO;
  }
  if (!self.hasRequestMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestOriginUserId) {
    [output writeInt64:1 value:self.requestOriginUserId];
  }
  if (self.hasRequestMessage) {
    [output writeString:2 value:self.requestMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestOriginUserId) {
    size_ += computeInt64Size(1, self.requestOriginUserId);
  }
  if (self.hasRequestMessage) {
    size_ += computeStringSize(2, self.requestMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppReplyFriendRequest*) parseFromData:(NSData*) data {
  return (AppReplyFriendRequest*)[[[AppReplyFriendRequest builder] mergeFromData:data] build];
}
+ (AppReplyFriendRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyFriendRequest*)[[[AppReplyFriendRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppReplyFriendRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AppReplyFriendRequest*)[[[AppReplyFriendRequest builder] mergeFromInputStream:input] build];
}
+ (AppReplyFriendRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyFriendRequest*)[[[AppReplyFriendRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyFriendRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppReplyFriendRequest*)[[[AppReplyFriendRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AppReplyFriendRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyFriendRequest*)[[[AppReplyFriendRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyFriendRequestBuilder*) builder {
  return [[AppReplyFriendRequestBuilder alloc] init];
}
+ (AppReplyFriendRequestBuilder*) builderWithPrototype:(AppReplyFriendRequest*) prototype {
  return [[AppReplyFriendRequest builder] mergeFrom:prototype];
}
- (AppReplyFriendRequestBuilder*) builder {
  return [AppReplyFriendRequest builder];
}
- (AppReplyFriendRequestBuilder*) toBuilder {
  return [AppReplyFriendRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestOriginUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestOriginUserId", [NSNumber numberWithLongLong:self.requestOriginUserId]];
  }
  if (self.hasRequestMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestMessage", self.requestMessage];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestOriginUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.requestOriginUserId] forKey: @"requestOriginUserId"];
  }
  if (self.hasRequestMessage) {
    [dictionary setObject: self.requestMessage forKey: @"requestMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppReplyFriendRequest class]]) {
    return NO;
  }
  AppReplyFriendRequest *otherMessage = other;
  return
      self.hasRequestOriginUserId == otherMessage.hasRequestOriginUserId &&
      (!self.hasRequestOriginUserId || self.requestOriginUserId == otherMessage.requestOriginUserId) &&
      self.hasRequestMessage == otherMessage.hasRequestMessage &&
      (!self.hasRequestMessage || [self.requestMessage isEqual:otherMessage.requestMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestOriginUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.requestOriginUserId] hash];
  }
  if (self.hasRequestMessage) {
    hashCode = hashCode * 31 + [self.requestMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppReplyFriendRequestBuilder()
@property (strong) AppReplyFriendRequest* resultFriendRequest;
@end

@implementation AppReplyFriendRequestBuilder
@synthesize resultFriendRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFriendRequest = [[AppReplyFriendRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFriendRequest;
}
- (AppReplyFriendRequestBuilder*) clear {
  self.resultFriendRequest = [[AppReplyFriendRequest alloc] init];
  return self;
}
- (AppReplyFriendRequestBuilder*) clone {
  return [AppReplyFriendRequest builderWithPrototype:resultFriendRequest];
}
- (AppReplyFriendRequest*) defaultInstance {
  return [AppReplyFriendRequest defaultInstance];
}
- (AppReplyFriendRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppReplyFriendRequest*) buildPartial {
  AppReplyFriendRequest* returnMe = resultFriendRequest;
  self.resultFriendRequest = nil;
  return returnMe;
}
- (AppReplyFriendRequestBuilder*) mergeFrom:(AppReplyFriendRequest*) other {
  if (other == [AppReplyFriendRequest defaultInstance]) {
    return self;
  }
  if (other.hasRequestOriginUserId) {
    [self setRequestOriginUserId:other.requestOriginUserId];
  }
  if (other.hasRequestMessage) {
    [self setRequestMessage:other.requestMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppReplyFriendRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppReplyFriendRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRequestOriginUserId:[input readInt64]];
        break;
      }
      case 18: {
        [self setRequestMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRequestOriginUserId {
  return resultFriendRequest.hasRequestOriginUserId;
}
- (SInt64) requestOriginUserId {
  return resultFriendRequest.requestOriginUserId;
}
- (AppReplyFriendRequestBuilder*) setRequestOriginUserId:(SInt64) value {
  resultFriendRequest.hasRequestOriginUserId = YES;
  resultFriendRequest.requestOriginUserId = value;
  return self;
}
- (AppReplyFriendRequestBuilder*) clearRequestOriginUserId {
  resultFriendRequest.hasRequestOriginUserId = NO;
  resultFriendRequest.requestOriginUserId = 0L;
  return self;
}
- (BOOL) hasRequestMessage {
  return resultFriendRequest.hasRequestMessage;
}
- (NSString*) requestMessage {
  return resultFriendRequest.requestMessage;
}
- (AppReplyFriendRequestBuilder*) setRequestMessage:(NSString*) value {
  resultFriendRequest.hasRequestMessage = YES;
  resultFriendRequest.requestMessage = value;
  return self;
}
- (AppReplyFriendRequestBuilder*) clearRequestMessage {
  resultFriendRequest.hasRequestMessage = NO;
  resultFriendRequest.requestMessage = @"";
  return self;
}
@end

@interface AppReplyEventInfo ()
@property (strong) NSString* title;
@property (strong) NSString* location;
@property SInt64 time;
@property (strong) NSData* eventUuid;
@property BOOL isPublic;
@property (strong) NSString* pb_description;
@property (strong) PBAppendableArray * acceptedUsersArray;
@end

@implementation AppReplyEventInfo

- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasEventUuid {
  return !!hasEventUuid_;
}
- (void) setHasEventUuid:(BOOL) _value_ {
  hasEventUuid_ = !!_value_;
}
@synthesize eventUuid;
- (BOOL) hasIsPublic {
  return !!hasIsPublic_;
}
- (void) setHasIsPublic:(BOOL) _value_ {
  hasIsPublic_ = !!_value_;
}
- (BOOL) isPublic {
  return !!isPublic_;
}
- (void) setIsPublic:(BOOL) _value_ {
  isPublic_ = !!_value_;
}
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
@synthesize acceptedUsersArray;
@dynamic acceptedUsers;
- (instancetype) init {
  if ((self = [super init])) {
    self.title = @"";
    self.location = @"";
    self.time = 0L;
    self.eventUuid = [NSData data];
    self.isPublic = NO;
    self.pb_description = @"";
  }
  return self;
}
static AppReplyEventInfo* defaultAppReplyEventInfoInstance = nil;
+ (void) initialize {
  if (self == [AppReplyEventInfo class]) {
    defaultAppReplyEventInfoInstance = [[AppReplyEventInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppReplyEventInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultAppReplyEventInfoInstance;
}
- (PBArray *)acceptedUsers {
  return acceptedUsersArray;
}
- (SInt64)acceptedUsersAtIndex:(NSUInteger)index {
  return [acceptedUsersArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTitle) {
    return NO;
  }
  if (!self.hasLocation) {
    return NO;
  }
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasEventUuid) {
    return NO;
  }
  if (!self.hasIsPublic) {
    return NO;
  }
  if (!self.hasDescription) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeString:1 value:self.title];
  }
  if (self.hasLocation) {
    [output writeString:2 value:self.location];
  }
  if (self.hasTime) {
    [output writeInt64:3 value:self.time];
  }
  if (self.hasEventUuid) {
    [output writeData:4 value:self.eventUuid];
  }
  if (self.hasIsPublic) {
    [output writeBool:5 value:self.isPublic];
  }
  if (self.hasDescription) {
    [output writeString:6 value:self.pb_description];
  }
  const NSUInteger acceptedUsersArrayCount = self.acceptedUsersArray.count;
  if (acceptedUsersArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.acceptedUsersArray.data;
    for (NSUInteger i = 0; i < acceptedUsersArrayCount; ++i) {
      [output writeInt64:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTitle) {
    size_ += computeStringSize(1, self.title);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(2, self.location);
  }
  if (self.hasTime) {
    size_ += computeInt64Size(3, self.time);
  }
  if (self.hasEventUuid) {
    size_ += computeDataSize(4, self.eventUuid);
  }
  if (self.hasIsPublic) {
    size_ += computeBoolSize(5, self.isPublic);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(6, self.pb_description);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.acceptedUsersArray.count;
    const SInt64 *values = (const SInt64 *)self.acceptedUsersArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppReplyEventInfo*) parseFromData:(NSData*) data {
  return (AppReplyEventInfo*)[[[AppReplyEventInfo builder] mergeFromData:data] build];
}
+ (AppReplyEventInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyEventInfo*)[[[AppReplyEventInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppReplyEventInfo*) parseFromInputStream:(NSInputStream*) input {
  return (AppReplyEventInfo*)[[[AppReplyEventInfo builder] mergeFromInputStream:input] build];
}
+ (AppReplyEventInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyEventInfo*)[[[AppReplyEventInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyEventInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppReplyEventInfo*)[[[AppReplyEventInfo builder] mergeFromCodedInputStream:input] build];
}
+ (AppReplyEventInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppReplyEventInfo*)[[[AppReplyEventInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppReplyEventInfoBuilder*) builder {
  return [[AppReplyEventInfoBuilder alloc] init];
}
+ (AppReplyEventInfoBuilder*) builderWithPrototype:(AppReplyEventInfo*) prototype {
  return [[AppReplyEventInfo builder] mergeFrom:prototype];
}
- (AppReplyEventInfoBuilder*) builder {
  return [AppReplyEventInfo builder];
}
- (AppReplyEventInfoBuilder*) toBuilder {
  return [AppReplyEventInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  if (self.hasEventUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventUuid", self.eventUuid];
  }
  if (self.hasIsPublic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isPublic", [NSNumber numberWithBool:self.isPublic]];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  [self.acceptedUsersArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acceptedUsers", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.time] forKey: @"time"];
  }
  if (self.hasEventUuid) {
    [dictionary setObject: self.eventUuid forKey: @"eventUuid"];
  }
  if (self.hasIsPublic) {
    [dictionary setObject: [NSNumber numberWithBool:self.isPublic] forKey: @"isPublic"];
  }
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  NSMutableArray * acceptedUsersArrayArray = [NSMutableArray new];
  NSUInteger acceptedUsersArrayCount=self.acceptedUsersArray.count;
  for(int i=0;i<acceptedUsersArrayCount;i++){
    [acceptedUsersArrayArray addObject: @([self.acceptedUsersArray int64AtIndex:i])];
  }
  [dictionary setObject: acceptedUsersArrayArray forKey: @"acceptedUsers"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppReplyEventInfo class]]) {
    return NO;
  }
  AppReplyEventInfo *otherMessage = other;
  return
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasEventUuid == otherMessage.hasEventUuid &&
      (!self.hasEventUuid || [self.eventUuid isEqual:otherMessage.eventUuid]) &&
      self.hasIsPublic == otherMessage.hasIsPublic &&
      (!self.hasIsPublic || self.isPublic == otherMessage.isPublic) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      [self.acceptedUsersArray isEqualToArray:otherMessage.acceptedUsersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.time] hash];
  }
  if (self.hasEventUuid) {
    hashCode = hashCode * 31 + [self.eventUuid hash];
  }
  if (self.hasIsPublic) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isPublic] hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  [self.acceptedUsersArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppReplyEventInfoBuilder()
@property (strong) AppReplyEventInfo* resultEventInfo;
@end

@implementation AppReplyEventInfoBuilder
@synthesize resultEventInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEventInfo = [[AppReplyEventInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEventInfo;
}
- (AppReplyEventInfoBuilder*) clear {
  self.resultEventInfo = [[AppReplyEventInfo alloc] init];
  return self;
}
- (AppReplyEventInfoBuilder*) clone {
  return [AppReplyEventInfo builderWithPrototype:resultEventInfo];
}
- (AppReplyEventInfo*) defaultInstance {
  return [AppReplyEventInfo defaultInstance];
}
- (AppReplyEventInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppReplyEventInfo*) buildPartial {
  AppReplyEventInfo* returnMe = resultEventInfo;
  self.resultEventInfo = nil;
  return returnMe;
}
- (AppReplyEventInfoBuilder*) mergeFrom:(AppReplyEventInfo*) other {
  if (other == [AppReplyEventInfo defaultInstance]) {
    return self;
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasEventUuid) {
    [self setEventUuid:other.eventUuid];
  }
  if (other.hasIsPublic) {
    [self setIsPublic:other.isPublic];
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  if (other.acceptedUsersArray.count > 0) {
    if (resultEventInfo.acceptedUsersArray == nil) {
      resultEventInfo.acceptedUsersArray = [other.acceptedUsersArray copy];
    } else {
      [resultEventInfo.acceptedUsersArray appendArray:other.acceptedUsersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppReplyEventInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppReplyEventInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTitle:[input readString]];
        break;
      }
      case 18: {
        [self setLocation:[input readString]];
        break;
      }
      case 24: {
        [self setTime:[input readInt64]];
        break;
      }
      case 34: {
        [self setEventUuid:[input readData]];
        break;
      }
      case 40: {
        [self setIsPublic:[input readBool]];
        break;
      }
      case 50: {
        [self setDescription:[input readString]];
        break;
      }
      case 56: {
        [self addAcceptedUsers:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTitle {
  return resultEventInfo.hasTitle;
}
- (NSString*) title {
  return resultEventInfo.title;
}
- (AppReplyEventInfoBuilder*) setTitle:(NSString*) value {
  resultEventInfo.hasTitle = YES;
  resultEventInfo.title = value;
  return self;
}
- (AppReplyEventInfoBuilder*) clearTitle {
  resultEventInfo.hasTitle = NO;
  resultEventInfo.title = @"";
  return self;
}
- (BOOL) hasLocation {
  return resultEventInfo.hasLocation;
}
- (NSString*) location {
  return resultEventInfo.location;
}
- (AppReplyEventInfoBuilder*) setLocation:(NSString*) value {
  resultEventInfo.hasLocation = YES;
  resultEventInfo.location = value;
  return self;
}
- (AppReplyEventInfoBuilder*) clearLocation {
  resultEventInfo.hasLocation = NO;
  resultEventInfo.location = @"";
  return self;
}
- (BOOL) hasTime {
  return resultEventInfo.hasTime;
}
- (SInt64) time {
  return resultEventInfo.time;
}
- (AppReplyEventInfoBuilder*) setTime:(SInt64) value {
  resultEventInfo.hasTime = YES;
  resultEventInfo.time = value;
  return self;
}
- (AppReplyEventInfoBuilder*) clearTime {
  resultEventInfo.hasTime = NO;
  resultEventInfo.time = 0L;
  return self;
}
- (BOOL) hasEventUuid {
  return resultEventInfo.hasEventUuid;
}
- (NSData*) eventUuid {
  return resultEventInfo.eventUuid;
}
- (AppReplyEventInfoBuilder*) setEventUuid:(NSData*) value {
  resultEventInfo.hasEventUuid = YES;
  resultEventInfo.eventUuid = value;
  return self;
}
- (AppReplyEventInfoBuilder*) clearEventUuid {
  resultEventInfo.hasEventUuid = NO;
  resultEventInfo.eventUuid = [NSData data];
  return self;
}
- (BOOL) hasIsPublic {
  return resultEventInfo.hasIsPublic;
}
- (BOOL) isPublic {
  return resultEventInfo.isPublic;
}
- (AppReplyEventInfoBuilder*) setIsPublic:(BOOL) value {
  resultEventInfo.hasIsPublic = YES;
  resultEventInfo.isPublic = value;
  return self;
}
- (AppReplyEventInfoBuilder*) clearIsPublic {
  resultEventInfo.hasIsPublic = NO;
  resultEventInfo.isPublic = NO;
  return self;
}
- (BOOL) hasDescription {
  return resultEventInfo.hasDescription;
}
- (NSString*) pb_description {
  return resultEventInfo.pb_description;
}
- (AppReplyEventInfoBuilder*) setDescription:(NSString*) value {
  resultEventInfo.hasDescription = YES;
  resultEventInfo.pb_description = value;
  return self;
}
- (AppReplyEventInfoBuilder*) clearDescription {
  resultEventInfo.hasDescription = NO;
  resultEventInfo.pb_description = @"";
  return self;
}
- (PBAppendableArray *)acceptedUsers {
  return resultEventInfo.acceptedUsersArray;
}
- (SInt64)acceptedUsersAtIndex:(NSUInteger)index {
  return [resultEventInfo acceptedUsersAtIndex:index];
}
- (AppReplyEventInfoBuilder *)addAcceptedUsers:(SInt64)value {
  if (resultEventInfo.acceptedUsersArray == nil) {
    resultEventInfo.acceptedUsersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultEventInfo.acceptedUsersArray addInt64:value];
  return self;
}
- (AppReplyEventInfoBuilder *)setAcceptedUsersArray:(NSArray *)array {
  resultEventInfo.acceptedUsersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppReplyEventInfoBuilder *)setAcceptedUsersValues:(const SInt64 *)values count:(NSUInteger)count {
  resultEventInfo.acceptedUsersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppReplyEventInfoBuilder *)clearAcceptedUsers {
  resultEventInfo.acceptedUsersArray = nil;
  return self;
}
@end

@interface AppReplyBuilder()
@property (strong) AppReply* resultAppReply;
@end

@implementation AppReplyBuilder
@synthesize resultAppReply;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppReply = [[AppReply alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppReply;
}
- (AppReplyBuilder*) clear {
  self.resultAppReply = [[AppReply alloc] init];
  return self;
}
- (AppReplyBuilder*) clone {
  return [AppReply builderWithPrototype:resultAppReply];
}
- (AppReply*) defaultInstance {
  return [AppReply defaultInstance];
}
- (AppReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppReply*) buildPartial {
  AppReply* returnMe = resultAppReply;
  self.resultAppReply = nil;
  return returnMe;
}
- (AppReplyBuilder*) mergeFrom:(AppReply*) other {
  if (other == [AppReply defaultInstance]) {
    return self;
  }
  if (other.hasResponseType) {
    [self setResponseType:other.responseType];
  }
  if (other.hasEventUuid) {
    [self mergeEventUuid:other.eventUuid];
  }
  if (other.usersArray.count > 0) {
    if (resultAppReply.usersArray == nil) {
      resultAppReply.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultAppReply.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  if (other.friendRequestsArray.count > 0) {
    if (resultAppReply.friendRequestsArray == nil) {
      resultAppReply.friendRequestsArray = [[NSMutableArray alloc] initWithArray:other.friendRequestsArray];
    } else {
      [resultAppReply.friendRequestsArray addObjectsFromArray:other.friendRequestsArray];
    }
  }
  if (other.eventInfoArray.count > 0) {
    if (resultAppReply.eventInfoArray == nil) {
      resultAppReply.eventInfoArray = [[NSMutableArray alloc] initWithArray:other.eventInfoArray];
    } else {
      [resultAppReply.eventInfoArray addObjectsFromArray:other.eventInfoArray];
    }
  }
  if (other.acceptedFriendsArray.count > 0) {
    if (resultAppReply.acceptedFriendsArray == nil) {
      resultAppReply.acceptedFriendsArray = [other.acceptedFriendsArray copy];
    } else {
      [resultAppReply.acceptedFriendsArray appendArray:other.acceptedFriendsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppReplyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppReplyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        AppReplyResponseType value = (AppReplyResponseType)[input readEnum];
        if (AppReplyResponseTypeIsValidValue(value)) {
          [self setResponseType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        AppReplyEventUUIDBuilder* subBuilder = [AppReplyEventUUID builder];
        if (self.hasEventUuid) {
          [subBuilder mergeFrom:self.eventUuid];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setEventUuid:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        AppReplyUserBuilder* subBuilder = [AppReplyUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        AppReplyFriendRequestBuilder* subBuilder = [AppReplyFriendRequest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFriendRequests:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        AppReplyEventInfoBuilder* subBuilder = [AppReplyEventInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEventInfo:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self addAcceptedFriends:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasResponseType {
  return resultAppReply.hasResponseType;
}
- (AppReplyResponseType) responseType {
  return resultAppReply.responseType;
}
- (AppReplyBuilder*) setResponseType:(AppReplyResponseType) value {
  resultAppReply.hasResponseType = YES;
  resultAppReply.responseType = value;
  return self;
}
- (AppReplyBuilder*) clearResponseType {
  resultAppReply.hasResponseType = NO;
  resultAppReply.responseType = AppReplyResponseTypeTSuccess;
  return self;
}
- (BOOL) hasEventUuid {
  return resultAppReply.hasEventUuid;
}
- (AppReplyEventUUID*) eventUuid {
  return resultAppReply.eventUuid;
}
- (AppReplyBuilder*) setEventUuid:(AppReplyEventUUID*) value {
  resultAppReply.hasEventUuid = YES;
  resultAppReply.eventUuid = value;
  return self;
}
- (AppReplyBuilder*) setEventUuidBuilder:(AppReplyEventUUIDBuilder*) builderForValue {
  return [self setEventUuid:[builderForValue build]];
}
- (AppReplyBuilder*) mergeEventUuid:(AppReplyEventUUID*) value {
  if (resultAppReply.hasEventUuid &&
      resultAppReply.eventUuid != [AppReplyEventUUID defaultInstance]) {
    resultAppReply.eventUuid =
      [[[AppReplyEventUUID builderWithPrototype:resultAppReply.eventUuid] mergeFrom:value] buildPartial];
  } else {
    resultAppReply.eventUuid = value;
  }
  resultAppReply.hasEventUuid = YES;
  return self;
}
- (AppReplyBuilder*) clearEventUuid {
  resultAppReply.hasEventUuid = NO;
  resultAppReply.eventUuid = [AppReplyEventUUID defaultInstance];
  return self;
}
- (NSMutableArray *)users {
  return resultAppReply.usersArray;
}
- (AppReplyUser*)usersAtIndex:(NSUInteger)index {
  return [resultAppReply usersAtIndex:index];
}
- (AppReplyBuilder *)addUsers:(AppReplyUser*)value {
  if (resultAppReply.usersArray == nil) {
    resultAppReply.usersArray = [[NSMutableArray alloc]init];
  }
  [resultAppReply.usersArray addObject:value];
  return self;
}
- (AppReplyBuilder *)setUsersArray:(NSArray *)array {
  resultAppReply.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AppReplyBuilder *)clearUsers {
  resultAppReply.usersArray = nil;
  return self;
}
- (NSMutableArray *)friendRequests {
  return resultAppReply.friendRequestsArray;
}
- (AppReplyFriendRequest*)friendRequestsAtIndex:(NSUInteger)index {
  return [resultAppReply friendRequestsAtIndex:index];
}
- (AppReplyBuilder *)addFriendRequests:(AppReplyFriendRequest*)value {
  if (resultAppReply.friendRequestsArray == nil) {
    resultAppReply.friendRequestsArray = [[NSMutableArray alloc]init];
  }
  [resultAppReply.friendRequestsArray addObject:value];
  return self;
}
- (AppReplyBuilder *)setFriendRequestsArray:(NSArray *)array {
  resultAppReply.friendRequestsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AppReplyBuilder *)clearFriendRequests {
  resultAppReply.friendRequestsArray = nil;
  return self;
}
- (NSMutableArray *)eventInfo {
  return resultAppReply.eventInfoArray;
}
- (AppReplyEventInfo*)eventInfoAtIndex:(NSUInteger)index {
  return [resultAppReply eventInfoAtIndex:index];
}
- (AppReplyBuilder *)addEventInfo:(AppReplyEventInfo*)value {
  if (resultAppReply.eventInfoArray == nil) {
    resultAppReply.eventInfoArray = [[NSMutableArray alloc]init];
  }
  [resultAppReply.eventInfoArray addObject:value];
  return self;
}
- (AppReplyBuilder *)setEventInfoArray:(NSArray *)array {
  resultAppReply.eventInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AppReplyBuilder *)clearEventInfo {
  resultAppReply.eventInfoArray = nil;
  return self;
}
- (PBAppendableArray *)acceptedFriends {
  return resultAppReply.acceptedFriendsArray;
}
- (SInt64)acceptedFriendsAtIndex:(NSUInteger)index {
  return [resultAppReply acceptedFriendsAtIndex:index];
}
- (AppReplyBuilder *)addAcceptedFriends:(SInt64)value {
  if (resultAppReply.acceptedFriendsArray == nil) {
    resultAppReply.acceptedFriendsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultAppReply.acceptedFriendsArray addInt64:value];
  return self;
}
- (AppReplyBuilder *)setAcceptedFriendsArray:(NSArray *)array {
  resultAppReply.acceptedFriendsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppReplyBuilder *)setAcceptedFriendsValues:(const SInt64 *)values count:(NSUInteger)count {
  resultAppReply.acceptedFriendsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (AppReplyBuilder *)clearAcceptedFriends {
  resultAppReply.acceptedFriendsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
